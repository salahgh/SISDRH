/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query allProjects {\n  allProjects {\n    id\n    description\n    nameAr\n    members {\n      personnel {\n        id\n        nom\n        pnom\n        noma\n        pnoma\n        matricule\n      }\n    }\n    name\n  }\n}\n\nquery bugProjectById($projectId: Long) {\n  projectById(id: $projectId) {\n    id\n    name\n    nameAr\n    description\n    members {\n      id\n      personnel {\n        noma\n        pnoma\n        nom\n        pnom\n        matricule\n        grade {\n          grade\n        }\n      }\n    }\n  }\n}\n\nquery bugAllStatuses {\n  allStatus {\n    id\n    statusAn\n    statusAr\n    statusFr\n  }\n}\n\nquery getAllIssuesByProjectPaged($pageRequest: PaginationInput, $projectId: Long) {\n  allIssuesByProject(pageRequest: $pageRequest, projectId: $projectId) {\n    pageable {\n      pageNumber\n      pageSize\n      sort {\n        orders {\n          direction\n          property\n        }\n      }\n    }\n    content {\n      id\n      description\n      title\n      issueType {\n        id\n        typeAr\n        typeFr\n        typeAn\n      }\n      sevirity {\n        id\n        sevirityFR\n        sevirityAR\n      }\n      priority {\n        id\n        priorityFR\n        priorityAR\n      }\n      comments {\n        id\n        createdDate\n        text\n        createdBy {\n          personnel {\n            matricule\n            nom\n            noma\n            pnom\n            pnoma\n          }\n        }\n      }\n      assignee {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n      }\n      status {\n        id\n        statusFr\n        statusAr\n      }\n      creator {\n        personnel {\n          matricule\n          noma\n          pnoma\n          nom\n          pnom\n          grade {\n            grade\n            abrGradeAr\n            abrGradeFr\n            libGradeAr\n            libGradeFr\n          }\n          arme {\n            id\n            libArmeFr\n            libArmeAr\n          }\n        }\n      }\n      tags {\n        name\n        id\n      }\n      attachments {\n        id\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery allPriorities {\n  allPriorities {\n    id\n    priorityAR\n    priorityFR\n  }\n}\n\nquery allSeverities {\n  allSeverities {\n    id\n    sevirityAR\n    sevirityFR\n  }\n}\n\nquery allTags {\n  allTags {\n    id\n    name\n  }\n}\n\nquery issueById($issueId: Long) {\n  issueById(id: $issueId) {\n    id\n    description\n    title\n    dateCreation\n    issueType {\n      id\n      typeAr\n      typeFr\n      typeAn\n    }\n    sevirity {\n      id\n      sevirityFR\n      sevirityAR\n    }\n    priority {\n      id\n      priorityFR\n      priorityAR\n    }\n    comments {\n      id\n      createdDate\n      text\n      createdBy {\n        personnel {\n          matricule\n          nom\n          noma\n          pnom\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n    }\n    assignee {\n      personnel {\n        matricule\n        nom\n        pnom\n        noma\n        pnoma\n      }\n    }\n    status {\n      id\n      statusFr\n      statusAr\n    }\n    creator {\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n        grade {\n          libGradeAr\n          libGradeFr\n          grade\n        }\n      }\n    }\n    attachments {\n      id\n    }\n    tags {\n      id\n      name\n    }\n    comments {\n      text\n      id\n      createdDate\n      createdBy {\n        personnel {\n          nom\n          noma\n          pnom\n          pnoma\n          matricule\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getStatusById($statusId: Long) {\n  satusById(satusId: $statusId) {\n    id\n    statusAr\n    statusFr\n    statusAn\n  }\n}\n\nquery getIssueTypeById($typeId: Long) {\n  issueTypeById(typeId: $typeId) {\n    id\n    typeAn\n    typeFr\n    typeAr\n  }\n}\n\nquery allIssueTypes {\n  allIssueTypes {\n    id\n    typeAn\n    typeAr\n    typeFr\n  }\n}\n\nquery sevirityById($sevirityId: Long) {\n  sevirityById(sevirityId: $sevirityId) {\n    id\n    sevirityAR\n    sevirityFR\n  }\n}\n\nquery attachmentById($id: Long) {\n  attachmentById(id: $id) {\n    id\n    mimeType\n    base64FileData\n    issueId\n    originalFileName\n    size\n  }\n}\n\nquery attachmentsByIssue($id: Long) {\n  attachmentsByIssue(issueId: $id) {\n    issueId\n    id\n    size\n    originalFileName\n    base64FileData\n    mimeType\n  }\n}\n\nquery allStatuseCount($projectId: Long) {\n  allStatuseCount(projectId: $projectId) {\n    id\n    statusAn\n    statusFr\n    statusAr\n    count_\n  }\n}\n\nquery allIssueTypesCount($projectId: Long) {\n  allIssueTypesCount(projectId: $projectId) {\n    count_\n    id\n    typeAn\n    typeFr\n    typeAr\n  }\n}\n\nquery searchIssues($issueStatusId: Long, $issueTypeId: Long, $priorityId: Long, $pageable: PaginationInput, $projectId: Long) {\n  searchIssues(\n    issueStatusId: $issueStatusId\n    issueTypeId: $issueTypeId\n    priorityId: $priorityId\n    pageable: $pageable\n    projectId: $projectId\n  ) {\n    pageable {\n      pageNumber\n      pageSize\n      sort {\n        orders {\n          direction\n          property\n        }\n      }\n    }\n    content {\n      id\n      description\n      title\n      dateCreation\n      issueType {\n        id\n        typeAr\n        typeFr\n        typeAn\n      }\n      sevirity {\n        id\n        sevirityFR\n        sevirityAR\n      }\n      priority {\n        id\n        priorityFR\n        priorityAR\n      }\n      comments {\n        id\n        createdDate\n        text\n        createdBy {\n          personnel {\n            matricule\n            nom\n            noma\n            pnom\n            pnoma\n          }\n        }\n      }\n      assignee {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n      }\n      status {\n        id\n        statusFr\n        statusAr\n      }\n      creator {\n        personnel {\n          matricule\n          noma\n          pnoma\n          nom\n          pnom\n          grade {\n            grade\n            abrGradeAr\n            abrGradeFr\n            libGradeAr\n            libGradeFr\n          }\n          arme {\n            id\n            libArmeFr\n            libArmeAr\n          }\n        }\n      }\n      tags {\n        name\n        id\n      }\n      attachments {\n        id\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nmutation createIssue($issue: IssueInputDtoInput) {\n  createIssue(issueInputDto: $issue) {\n    id\n    title\n    description\n    priority {\n      id\n      priorityFR\n      priorityAR\n    }\n    status {\n      id\n      statusAr\n      statusFr\n      statusAn\n    }\n    tags {\n      id\n      name\n    }\n    sevirity {\n      id\n      sevirityFR\n      sevirityAR\n    }\n    issueType {\n      typeFr\n      typeAr\n      typeAn\n      id\n    }\n  }\n}\n\nmutation updateIssueType($issueId: Long, $typeId: Long) {\n  updateIssueType(issueId: $issueId, typeId: $typeId) {\n    id\n  }\n}\n\nmutation updateIssueStatus($issueId: Long, $statusId: Long) {\n  updateIssueStatus(issueId: $issueId, statusId: $statusId) {\n    id\n  }\n}\n\nmutation updateIssueSevirity($issueId: Long, $sevirityId: Long) {\n  updateIssueSevirity(issueId: $issueId, sevirityId: $sevirityId) {\n    id\n  }\n}\n\nmutation deleteIssueComment($commentId: Long) {\n  deleteIssueComment(commentId: $commentId)\n}\n\nmutation updateIssueComment($commentId: Long, $text: String) {\n  updateIssueComment(commentId: $commentId, text: $text) {\n    text\n    id\n    createdDate\n    createdBy {\n      personnel {\n        nom\n        noma\n        pnom\n        pnoma\n        matricule\n        grade {\n          grade\n          libGradeFr\n          libGradeAr\n        }\n      }\n    }\n  }\n}\n\nmutation createIssueComment($text: String, $issueId: Long) {\n  createIssueComment(text: $text, issueId: $issueId) {\n    text\n    id\n    createdDate\n    createdBy {\n      personnel {\n        nom\n        noma\n        pnom\n        pnoma\n        matricule\n        grade {\n          grade\n          libGradeFr\n          libGradeAr\n        }\n      }\n    }\n  }\n}\n\nmutation addIssueTag($issueId: Long, $tagname: String) {\n  addIssueTag(issueId: $issueId, tagname: $tagname)\n}\n\nquery notifications($pageable: PaginationInput, $user: String) {\n  allNotifications(pageable: $pageable, userName: $user) {\n    pageable {\n      pageSize\n      pageNumber\n    }\n    totalElements\n    content {\n      id\n      dateTime\n      emmitter {\n        personnel {\n          noma\n          pnoma\n          nom\n          pnom\n          matricule\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n          }\n        }\n      }\n      issue {\n        id\n        title\n        issueType {\n          id\n          typeAr\n          typeFr\n        }\n      }\n      notificationType {\n        id\n        libAr\n        libFr\n      }\n      state\n    }\n  }\n}\n\nmutation changeNotificationState($notificationState: NotificationState, $notificationId: Long) {\n  changeNotificationState(\n    notificationId: $notificationId\n    notificationState: $notificationState\n  )\n}": types.AllProjectsDocument,
    "query findPam2024($pageable: PaginationInput, $filteringParams: FilteringParamsInput) {\n  findPam2024(pageable: $pageable, filteringParams: $filteringParams) {\n    pageable {\n      pageSize\n      pageNumber\n      sort {\n        orders {\n          property\n          direction\n        }\n      }\n    }\n    totalElements\n    totalPages\n    content {\n      grade\n      g\n      noma\n      pnoma\n      libArmeAr\n      arme\n      matricule\n      personnelNotes {\n        id\n      }\n      structureSn {\n        id\n        typeStructureSn {\n          id\n        }\n        runite {\n          id\n          libUniteeAr\n          abreviationAr\n          abreviationFr\n          regionMilitaire {\n            id\n            libRegionFr\n            libRegionAr\n            libAbrRegionAr\n            libAbrRegionFr\n          }\n        }\n      }\n      dureeN\n      dureeS\n      libArmeAr\n      fonction\n      ensFonction\n      ens\n      NMutation\n      NDureeS\n      poste\n      csn\n      promotionNumber\n      DUREE_FONCT\n      ficheVoeuxes {\n        id {\n          matricule\n          annee\n        }\n        rhRunite1 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n        rhRunite2 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n        rhRunite3 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n      }\n      demandeRadiations {\n        dateDemande\n        id\n      }\n      dip_civ\n      dip_mil\n      code_dip_civ\n      code_dip_mil\n      formation\n      obs\n      dip_mil\n      dipmil {\n        abrFr\n        codeDipMil\n      }\n      dipcivil {\n        abrFr\n      }\n    }\n  }\n}\n\nquery findPamOff2024ById($id: String) {\n  findPamOff2024ById(id: $id) {\n    grade\n    g\n    noma\n    pnoma\n    libArmeAr\n    arme\n    matricule\n    personnelNotes {\n      id\n    }\n    structureSn {\n      id\n      typeStructureSn {\n        id\n      }\n      runite {\n        id\n        libUniteeAr\n        abreviationAr\n        abreviationFr\n        regionMilitaire {\n          id\n          libRegionFr\n          libRegionAr\n          libAbrRegionAr\n          libAbrRegionFr\n        }\n      }\n    }\n    dureeN\n    dureeS\n    libArmeAr\n    fonction\n    ensFonction\n    ens\n    NMutation\n    NDureeS\n    poste\n    csn\n    promotionNumber\n    DUREE_FONCT\n    ficheVoeuxes {\n      id {\n        matricule\n        annee\n      }\n      rhRunite1 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n      rhRunite2 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n      rhRunite3 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n    }\n    demandeRadiations {\n      dateDemande\n      id\n    }\n    dip_civ\n    dip_mil\n    code_dip_civ\n    code_dip_mil\n    formation\n    obs\n    dipmil {\n      abrFr\n    }\n    dipcivil {\n      abrFr\n    }\n  }\n}\n\nquery findDistinctArmes {\n  findDistinctArmes {\n    idArme\n    libArme\n    count_\n  }\n}\n\nquery findDistinctGrade {\n  findDistinctGrade {\n    grade\n    g\n    count_\n  }\n}\n\nquery findDistinctPostes {\n  findDistinctPostes {\n    poste\n    count_\n    trie_\n  }\n}\n\nquery findDistinctDiplomesCiviles {\n  findDistinctDiplomesCiviles {\n    codeDipCiv\n    abrFr\n    abrAr\n    libFr\n    libFr\n    count_\n  }\n}\n\nquery findDistinctDiplomesMilitaires {\n  findDistinctDiplomesMilitaires {\n    codeDipMil\n    abrAr\n    abrFr\n    libFr\n    libAr\n    count_\n  }\n}\n\nquery findBy($name: ReportNames) {\n  findReportById(name: $name) {\n    obs\n    fileName\n    nomAR\n    nomFR\n  }\n}\n\nquery allReports {\n  allReports {\n    nomFR\n    nomAR\n    fileName\n    obs\n    get_order\n  }\n}\n\nquery findDistinctCsn {\n  findDistinctCsn {\n    count_\n    c\n    csn\n  }\n}\n\nquery reportPosteRealise {\n  reportPosteRealise {\n    poste\n    realise\n    ted\n    pourcentage\n  }\n}\n\nquery getReport($reportName: ReportNames, $format: ReportFormats, $reportsSubFolder: ReportsSubFolder) {\n  report(\n    reportName: $reportName\n    format: $format\n    reportsSubFolder: $reportsSubFolder\n  )\n}\n\nquery allRegionsMilitaires {\n  allRegionsMilitaires {\n    id\n    libRegionFr\n    libRegionAr\n    libAbrRegionAr\n    libAbrRegionFr\n    trie\n  }\n}\n\nquery findRStructureSnById($id: String) {\n  findRStructureSnById(id: $id) {\n    id\n    pere {\n      id\n    }\n    typeStructureSn {\n      id\n      libAr\n    }\n    runite {\n      id\n      abreviationAr\n      abreviationFr\n      libUniteeAr\n      libUniteeFr\n      regionMilitaire {\n        id\n        libAbrRegionAr\n        libAbrRegionFr\n      }\n    }\n    fils {\n      id\n      pere {\n        id\n      }\n      typeStructureSn {\n        id\n        libAr\n      }\n      runite {\n        id\n        abreviationAr\n        abreviationFr\n        libUniteeAr\n        libUniteeFr\n        regionMilitaire {\n          id\n          libAbrRegionAr\n          libAbrRegionFr\n        }\n      }\n      fils {\n        id\n        pere {\n          id\n        }\n        typeStructureSn {\n          id\n          libAr\n        }\n        runite {\n          id\n          abreviationAr\n          abreviationFr\n          libUniteeAr\n          libUniteeFr\n          regionMilitaire {\n            id\n            libAbrRegionAr\n            libAbrRegionFr\n          }\n        }\n        fils {\n          id\n          pere {\n            id\n          }\n          typeStructureSn {\n            id\n            libAr\n          }\n          runite {\n            id\n            abreviationAr\n            abreviationFr\n            libUniteeAr\n            libUniteeFr\n            regionMilitaire {\n              id\n              libAbrRegionAr\n              libAbrRegionFr\n            }\n          }\n          fils {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation addDemandeRadiation($matricule: String) {\n  addDemandeRadiation(matricule: $matricule)\n}\n\nmutation deleteDemandeRadiation($id: Long) {\n  deleteDemandeRadiation(id: $id)\n}\n\nquery photoByMaticuleWithThumbs($matricule: String) {\n  photoByMatricule(matricule: $matricule) {\n    id\n    photoData\n    format\n    translateX\n    translateY\n    rotation\n    width\n    height\n    personnel {\n      id\n      matricule\n      noma\n      pnoma\n    }\n    thumbnails {\n      thumbData\n      id\n      thumbSize\n    }\n  }\n}\n\nmutation createPhoto($ff: PhotoInput) {\n  createPhoto(photoInput: $ff) {\n    photo {\n      photoData\n      format\n      width\n      height\n      translateY\n      translateY\n      rotation\n      id\n    }\n    rect {\n      x\n      y\n      width\n      height\n    }\n  }\n}\n\nmutation updatePersonnelNoteGrantedUsers($PsesonnelNoteId: Long, $userIds: [String]) {\n  updatePersonnelNoteGrantedUsers(\n    PsesonnelNoteId: $PsesonnelNoteId\n    userIds: $userIds\n  )\n}\n\nmutation createPersonnelNote($note: PersonnelNoteInput) {\n  createPersonnelNote(note: $note)\n}": types.FindPam2024Document,
    "query findPersonnelNoteById($id: Long) {\n  findPersonnelNoteById(id: $id) {\n    id\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    observation\n    color\n    user {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findPersonnelNotesByUserAndPersonnel($userId: String, $pesonnelId: String, $includeAllNotes: Boolean!) {\n  findPersonnelNotesByUserAndPersonnel(\n    userId: $userId\n    personnelId: $pesonnelId\n    includeAllNotes: $includeAllNotes\n  ) {\n    id\n    user {\n      id\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    dateCreation\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n        grade {\n          grade\n        }\n        arme {\n          id\n        }\n        pamOff2024 {\n          trieAnciennete\n        }\n      }\n    }\n    observation\n    color\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findPersonnelNotes {\n  findPersonnelNotes {\n    id\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    observation\n    color\n    user {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    dateCreation\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findAllPersonnelNotesPaged($pageable: PaginationInput, $searchParams: PersonnelNoteSearchParamsInput) {\n  findAllPersonnelNotesPaged(pageable: $pageable, searchParams: $searchParams) {\n    content {\n      id\n      pamOff2024 {\n        matricule\n        noma\n        pnoma\n        arme\n        personnel {\n          grade {\n            grade\n            libGradeArDetermine\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n      dateCreation\n      user {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeArDetermine\n            libGradeFr\n          }\n          arme {\n            id\n          }\n        }\n      }\n      observation\n      authorizedUsers {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n            libGradeArDetermine\n          }\n          arme {\n            id\n          }\n        }\n      }\n    }\n    totalPages\n    totalElements\n  }\n}\n\nquery findPersonnelNotesByUser($userId: String, $pageable: PaginationInput) {\n  findPersonnelNotesByUser(userId: $userId, pageable: $pageable) {\n    content {\n      id\n      pamOff2024 {\n        matricule\n        noma\n        pnoma\n        arme\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeArDetermine\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n      dateCreation\n      user {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeArDetermine\n            libGradeFr\n          }\n          arme {\n            id\n          }\n        }\n      }\n      observation\n      authorizedUsers {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n            libGradeArDetermine\n          }\n          arme {\n            id\n          }\n        }\n      }\n    }\n    totalPages\n    totalElements\n  }\n}\n\nmutation createPersonnelNote($note: PersonnelNoteInput) {\n  createPersonnelNote(note: $note)\n}\n\nmutation deletePersonnelNote($id: Long) {\n  deletePersonnelNote(id: $id)\n}\n\nmutation deleteAuthorizedUser($userName: String, $noteId: Long) {\n  deleteAuthorizedUser(userName: $userName, noteId: $noteId)\n}\n\nmutation updatePersonnelNoteContent($noteContent: String, $personnelId: Long) {\n  updatePersonnelNoteContent(\n    noteContent: $noteContent\n    personnelNoteId: $personnelId\n  )\n}": types.FindPersonnelNoteByIdDocument,
    "query findByMatricule($matricule: String) {\n  findByMatricule(matricule: $matricule) {\n    noteDiplome {\n      note\n      lib\n      id\n    }\n    ancienneteDansLeGrade\n    felicitations {\n      nombre\n      felicitation {\n        autorite\n        note\n      }\n    }\n    sanctions {\n      nombre\n      sanctions {\n        lib\n        note\n      }\n    }\n    anne\n    chef\n    dureeExcercice\n    ancienneteDansLeGrade\n    nombreDeProposition\n    noteArme\n    noteRegionale\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      arme {\n        id\n        libArmeAr\n        libArmeFr\n      }\n    }\n    noteRegionale\n  }\n}\n\nquery findAllPav($pageable: PaginationInput, $idGrade: Long) {\n  findAllPav(pageable: $pageable, idGrade: $idGrade) {\n    content {\n      noteDiplome {\n        note\n        lib\n        id\n      }\n      noteGlobale\n      ancienneteDansLeGrade\n      dureeExcerciceUnite\n      ponderation {\n        id\n      }\n      felicitations {\n        nombre\n        felicitation {\n          autorite\n          note\n        }\n        id {\n          felicitationsId\n          pavId\n        }\n      }\n      sanctions {\n        nombre\n        sanctions {\n          lib\n          note\n          id\n        }\n        id {\n          pavId\n          sanctionsId\n        }\n      }\n      anne\n      chef\n      dureeExcercice\n      ancienneteDansLeGrade\n      nombreDeProposition\n      noteArme\n      noteRegionale\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n        grade {\n          grade\n          libGradeAr\n          libGradeFr\n        }\n        arme {\n          id\n          libArmeAr\n          libArmeFr\n        }\n        pamOff2024 {\n          grade\n          g\n          noma\n          pnoma\n          libArmeAr\n          arme\n          matricule\n          personnelNotes {\n            id\n          }\n          structureSn {\n            id\n            typeStructureSn {\n              id\n            }\n            runite {\n              id\n              libUniteeAr\n              abreviationAr\n              abreviationFr\n              regionMilitaire {\n                id\n                libRegionFr\n                libRegionAr\n                libAbrRegionAr\n                libAbrRegionFr\n              }\n            }\n          }\n          dureeN\n          dureeS\n          libArmeAr\n          fonction\n          ensFonction\n          ens\n          NMutation\n          NDureeS\n          poste\n          csn\n          promotionNumber\n          DUREE_FONCT\n          ficheVoeuxes {\n            id {\n              matricule\n              annee\n            }\n            rhRunite1 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n            rhRunite2 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n            rhRunite3 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n          }\n          demandeRadiations {\n            dateDemande\n            id\n          }\n          dip_civ\n          dip_mil\n          code_dip_civ\n          code_dip_mil\n          formation\n          obs\n          dip_mil\n          dipmil {\n            abrFr\n            codeDipMil\n          }\n          dipcivil {\n            abrFr\n          }\n          trieAnciennete\n        }\n      }\n      noteRegionale\n      id\n      costumSort\n    }\n    pageable {\n      pageNumber\n      pageSize\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery findAllSanctions($pageable: PaginationInput) {\n  findAllRSanctions(pageable: $pageable) {\n    content {\n      id\n      lib\n      note\n    }\n  }\n}\n\nquery findCritereDePonderation($chef: Boolean!, $grade: Long, $poste: String) {\n  findCritereDePonderation(chef: $chef, grade: $grade, poste: $poste) {\n    note\n    id\n    grade {\n      grade\n      libGradeAr\n    }\n    poste {\n      idPoste\n    }\n  }\n}\n\nquery findAllNoteDiplome($pageable: PaginationInput) {\n  findAllNoteDiplome(pageable: $pageable) {\n    content {\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      id\n      index_\n      lib\n      note\n    }\n  }\n}\n\nquery findAllFelicitions($pageable: PaginationInput) {\n  findAllFelicitions(pageable: $pageable) {\n    content {\n      autorite\n      id\n      note\n    }\n  }\n}\n\nmutation addPav($pav: PavDtoInput) {\n  savePav(pavDto: $pav) {\n    id\n  }\n}\n\nmutation deletePav($pavId: String) {\n  deleteNote(pavId: $pavId)\n}\n\nmutation updateCostumSort($costumSort: Int, $pavId: String) {\n  updateCostumSort(costumSort: $costumSort, pavId: $pavId)\n}": types.FindByMatriculeDocument,
    "query GetOwnedFolders($username_: String!) {\n  ownedFolders(username_: $username_) {\n    id\n    name\n    description\n  }\n}\n\nquery findAllOcrResultEntityByFoldersContaining($folderId: Long, $pagination: PaginationInput) {\n  findAllOcrResultEntityByFoldersContaining(\n    pageable: $pagination\n    folderId: $folderId\n  ) {\n    content {\n      id\n      numberOfPapers\n      originalFileName\n      ocrDone\n      ocrResultUserGrants {\n        id {\n          type\n          userId\n          ocrResultId\n        }\n        user {\n          id\n          personnel {\n            matricule\n            noma\n            pnoma\n            nom\n            pnom\n          }\n        }\n      }\n      typeTexteReglementaire {\n        id\n        libTypeTexteAr\n        libTypeTexteFr\n      }\n      folders {\n        id\n        description\n        name\n      }\n      ocrResultPinned {\n        id\n      }\n      confidentialite {\n        id\n        libConfidentialiteAr\n        libConfidentialiteFr\n      }\n    }\n    totalElements\n    pageable {\n      pageSize\n      pageNumber\n    }\n  }\n}\n\nquery GetFovoriteFolder {\n  favoriteFolder(userName: \"ddf\") {\n    id\n    description\n  }\n}\n\nquery GetFolder($folderId: Long) {\n  folder(folderId: $folderId) {\n    id\n    description\n  }\n}\n\nquery GetPdfFile($fileSignatue: String) {\n  ocrResultByid(fileSignatue: $fileSignatue) {\n    originalFileName\n    id\n    folders {\n      id\n      name\n      description\n    }\n    ocrDone\n    numberOfPapers\n    typeTexteReglementaire {\n      libTypeTexteFr\n      libTypeTexteAr\n    }\n    confidentialite {\n      libConfidentialiteAr\n      libConfidentialiteFr\n      id\n    }\n    reference\n    dateReference\n    executedAt\n    terminatedAt\n  }\n}\n\nquery FindAllOcrResultsPaged($pageable: PaginationInput) {\n  findAllOcrResultsPaged(pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    totalElements\n    numberOfElements\n    totalPages\n    content {\n      owner {\n        id\n        personnel {\n          matricule\n          id\n          nom\n          noma\n          pnom\n          pnoma\n        }\n      }\n      terminatedAt\n      originalFileName\n      dateReference\n      createdDate\n      executedAt\n      terminatedAt\n      ocrDone\n      folders {\n        id\n        createdDate\n      }\n    }\n  }\n}\n\nquery CpuUsage {\n  cpuUsage_\n}\n\nquery ThreadInfo {\n  threadInfo\n}\n\nquery MemoryUsage {\n  memoryUsage_ {\n    committed\n    init\n    max\n    used\n  }\n}\n\nquery AllTypeTexteReglementaires {\n  allTypeTexteReglementaires {\n    id\n    libTypeTexteAr\n    libTypeTexteFr\n  }\n}\n\nquery TypeTexteReglementaireByLibFr($libFr: String) {\n  typeTexteReglementaireByLibFr(libFr: $libFr) {\n    libTypeTexteFr\n    libTypeTexteAr\n    id\n  }\n}\n\nquery AllConfidentialites {\n  allConfidentialites {\n    id\n    libConfidentialiteAr\n    libConfidentialiteFr\n  }\n}\n\nquery IsOcrJobRunning {\n  isOcrJobRunning\n}\n\nquery OcrResultImagePrepared($id: String, $pageIndex: Int, $size: Int) {\n  ocrResultImagePrepared(ocrResultid: $id, pageIndex: $pageIndex, size: $size)\n}\n\nquery OcrResultPdf($id: String) {\n  ocrResultPdf(ocrResultid: $id)\n}\n\nquery FindPinnedOcrResults {\n  findPinnedOcrResults {\n    ocrResult {\n      typeTexteReglementaire {\n        id\n        libTypeTexteFr\n        libTypeTexteAr\n      }\n      confidentialite {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n      dateReference\n      dateReference\n      originalFileName\n      numberOfPapers\n    }\n  }\n}\n\nquery _FindAllOcrResultsPaged($pageable: PaginationInput) {\n  findAllOcrResultsPaged(pageable: $pageable) {\n    content {\n      ocrDone\n      originalFileName\n      createdDate\n    }\n  }\n}\n\nquery FindAllPinnedFiles {\n  findPinnedOcrResults {\n    ocrResult {\n      id\n      originalFileName\n      dateReference\n      reference\n      typeTexteReglementaire {\n        id\n        libTypeTexteAr\n        libTypeTexteFr\n      }\n      numberOfPapers\n      objects {\n        subject {\n          id\n          typeTexteReglementaire {\n            id\n            libTypeTexteAr\n            libTypeTexteFr\n          }\n          reference\n          dateReference\n          numberOfPapers\n        }\n        relationType {\n          id\n          libTypeRelationAr\n          libTypRelationFr\n        }\n      }\n      subjects {\n        object {\n          typeTexteReglementaire {\n            id\n            libTypeTexteFr\n            libTypeTexteAr\n          }\n          reference\n          dateReference\n          numberOfPapers\n        }\n        relationType {\n          id\n          libTypRelationFr\n          libTypeRelationAr\n        }\n      }\n      confidentialite {\n        id\n        libConfidentialiteAr\n        libConfidentialiteFr\n      }\n    }\n  }\n}\n\nquery getLoggedInUser($userName: String) {\n  user(matricule: $userName) {\n    id\n    accountNonExpired\n    accountNonLocked\n    authorities {\n      authority\n    }\n    demandeInscription {\n      dateDemande\n    }\n    folders {\n      id\n    }\n    habilitation {\n      id\n      abbreviation\n      libHabilitationAr\n      libHabilitationFr\n      confidentialites {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n    }\n    personnel {\n      matricule\n      nom\n      pnom\n      noma\n      pnoma\n      grade {\n        libGradeAr\n        grade\n      }\n      arme {\n        libArmeAr\n        id\n      }\n    }\n  }\n}\n\nquery getHablitations {\n  habilitations {\n    libHabilitationAr\n    libHabilitationFr\n    id\n    confidentialites {\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n  }\n}\n\nquery allOcrResultConfidentialteNotDefined {\n  allOcrResultConfidentialteNotDefined {\n    id\n    originalFileName\n    typeTexteReglementaire {\n      id\n      libTypeTexteAr\n      libTypeTexteFr\n    }\n    reference\n    dateReference\n    numberOfPapers\n    confidentialite {\n      id\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n  }\n}\n\nquery enumsWrapperForCodeGeneration($enum: EnumsWrapperInput) {\n  enumsWrapperForCodeGeneration(enumsWrapper: $enum) {\n    privilegesEnum\n    rolesEnum\n  }\n}\n\nquery Users {\n  getUsers {\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n    habilitation {\n      libHabilitationFr\n      libHabilitationAr\n    }\n  }\n}\n\nquery OcrResultUserGrants($fileSignatue: String) {\n  ocrResultByid(fileSignatue: $fileSignatue) {\n    id\n    reference\n    dateReference\n    typeTexteReglementaire {\n      libTypeTexteFr\n      libTypeTexteFr\n    }\n    confidentialite {\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n    ocrResultUserGrants {\n      user {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n        habilitation {\n          libHabilitationFr\n          confidentialites {\n            libConfidentialiteFr\n            libConfidentialiteAr\n          }\n        }\n      }\n      id {\n        type\n        ocrResultId\n        userId\n      }\n    }\n  }\n}\n\nquery AllOcrResultUsersGrantsPaged($pageable: PaginationInput) {\n  allOcrResultUsersGrantsPaged(pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      id\n      confidentialite {\n        libConfidentialiteFr\n        libConfidentialiteAr\n        id\n      }\n      typeTexteReglementaire {\n        id\n        libTypeTexteFr\n        libTypeTexteAr\n      }\n      dateReference\n      reference\n      numberOfPapers\n      originalFileName\n      ocrResultUserGrants {\n        id {\n          userId\n          ocrResultId\n          type\n        }\n        user {\n          personnel {\n            nom\n            pnom\n            noma\n            pnoma\n            matricule\n          }\n        }\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery userConfidentialites($matricule: String) {\n  user(matricule: $matricule) {\n    habilitation {\n      libHabilitationFr\n      confidentialites {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n    }\n  }\n}\n\nquery User($matricule: String) {\n  user(matricule: $matricule) {\n    id\n    personnel {\n      matricule\n      nom\n      pnom\n      noma\n      pnoma\n    }\n    habilitation {\n      id\n      libHabilitationAr\n      libHabilitationFr\n    }\n    enabled\n    demandeInscription {\n      dateDemande\n    }\n    authorities {\n      authority\n    }\n    accountNonLocked\n    accountNonLocked\n    privileges {\n      id\n      description\n      name\n    }\n    privileges_restriction {\n      name\n      description\n      id\n    }\n    roles {\n      id\n      description\n      name\n      privileges {\n        name\n        description\n        id\n      }\n    }\n  }\n}\n\nquery allUsersPaged($pageable: PaginationInput) {\n  allUsersPaged(pageable: $pageable) {\n    content {\n      id\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n      }\n    }\n    totalElements\n  }\n}\n\nquery UserAuthorities($matricule: String) {\n  user(matricule: $matricule) {\n    authorities {\n      authority\n    }\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n  }\n}\n\nquery findAllRoles {\n  findAllRoles {\n    id\n    description\n    name\n    privileges {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery findAllRolesPaged($paginationInput: PaginationInput) {\n  allRolesPaged(pageable: $paginationInput) {\n    totalElements\n    content {\n      id\n      name\n      description\n      privileges {\n        id\n        name\n        description\n      }\n    }\n  }\n}\n\nquery findRoleById($roleId: String) {\n  findRoleById(roleId: $roleId) {\n    id\n    name\n    description\n    privileges {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery allPrivileges {\n  allPrivileges {\n    id\n    description\n    name\n  }\n}\n\nquery privilegeById($privilegeById: Long) {\n  privilegeById(PrivilegeId: $privilegeById) {\n    name\n    description\n    id\n  }\n}\n\nquery allPrivilegesPaged($paginationInput: PaginationInput) {\n  allPrivilegesPaged(pageable: $paginationInput) {\n    totalElements\n    content {\n      id\n      description\n      name\n    }\n  }\n}\n\nquery findAllDemandeInscriptionRemaining {\n  findAllDemandeInscriptionRemaining {\n    id\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n    dateDemande\n  }\n}\n\nmutation validateUserDemande($matricule: String) {\n  validateUserDemande(matricule: $matricule) {\n    personnel {\n      matricule\n      noma\n      pnomA\n      pnom\n      nom\n    }\n  }\n}\n\nmutation AddOcrResultToFolder($folderId: Long!, $ocrResultId: [String]!) {\n  addOcrResultsToFolder(folderId: $folderId, ocrResultIds: $ocrResultId) {\n    id\n    name\n    pdfFiles {\n      id\n      originalFileName\n    }\n  }\n}\n\nmutation CreateFolder($folder: FolderInput, $username: String) {\n  createFolder(folder: $folder, username: $username) {\n    name\n    description\n    id\n    color\n  }\n}\n\nmutation DeleteFolder($folder_id: Long) {\n  deleteFolder(folderId: $folder_id)\n}\n\nmutation DeletePdfFileFromFolder($folderId: Long, $pdfId: String) {\n  deletePdfFileFromFolder(folderId: $folderId, pdfId: $pdfId)\n}\n\nmutation StartScheduler {\n  startScheduler\n}\n\nmutation StopScheduler {\n  stopScheduler\n}\n\nmutation PinOcrResult($ocrResultId: String) {\n  pinOcrResult(ocrResultId: $ocrResultId) {\n    id\n  }\n}\n\nmutation UnpinOcrResult($id: String) {\n  unpinOcrResult(id: $id)\n}\n\nmutation SetHabilitation($habilitaitonId: String, $userName: String) {\n  setHablitation(habilitaitonId: $habilitaitonId, userName: $userName)\n}\n\nmutation changeOcrResultGrant($ocrResultUserGrantKeys: [OcrResultUserGrantKeyInputInput], $ocrResultId: String) {\n  changeOcrResultGrant(\n    ocrResultId: $ocrResultId\n    ocrResultUserGrantKeysInput: $ocrResultUserGrantKeys\n  ) {\n    id {\n      ocrResultId\n      type\n      userId\n    }\n    user {\n      personnel {\n        matricule\n        id\n        noma\n        pnoma\n      }\n    }\n  }\n}\n\nmutation updateConfidentialite($ocrResultId: String, $confidentialiteId: String) {\n  updateConfidentialite(\n    ocrResultId: $ocrResultId\n    confidentailteId: $confidentialiteId\n  )\n}\n\nmutation UserAddPrivilege($username: String, $privilegeName: String) {\n  userAddPrivilege(userName: $username, privilegeName: $privilegeName)\n}\n\nmutation UserAddPrivilegeRestriction($privilegeName: String, $userName: String) {\n  userAddPrivilegeRestriction(privilegeName: $privilegeName, userName: $userName)\n}\n\nmutation UserAddRole($userName: String, $roleName: String) {\n  userAddRole(userName: $userName, roleName: $roleName)\n}\n\nmutation UserDeletePrivilege($userName: String, $privilegeName: String) {\n  userDeletePrivilege(userName: $userName, privilegeName: $privilegeName)\n}\n\nmutation UserDeletePrivilegeRestriction($userName: String, $privilegeName: String) {\n  userDeletePrivilegeRestriction(\n    userName: $userName\n    privilegeName: $privilegeName\n  )\n}\n\nmutation UserDeleteRole($userName: String, $roleName: String) {\n  userDeleteRole(userName: $userName, roleName: $roleName)\n}\n\nmutation addPrivilegeToRole($roleId: String, $privilegeId: String) {\n  addPrivilegeToRole(roleId: $roleId, privilegeId: $privilegeId)\n}\n\nmutation deletePrivilegeFromRole($roleId: String, $privilegeId: String) {\n  deletePrivilegeFromRole(privilegeId: $privilegeId, roleId: $roleId)\n}\n\nmutation generateThumbnails {\n  generateThumbnails\n}": types.GetOwnedFoldersDocument,
    "query GetPhotoByMatriculeAndSize($matricule: String, $size: Int!) {\n  getThumbnailByMatriculeAndSize(matricule: $matricule, size: $size) {\n    thumbData\n    id\n    photo {\n      format\n    }\n    thumbSize\n  }\n}\n\nmutation generateThumbnails {\n  generateThumbnails\n}\n\nquery photoByMatricule($matricule: String) {\n  photoByMatricule(matricule: $matricule) {\n    id\n    format\n    translateX\n    translateY\n    height\n    width\n    rotation\n    photoData\n    personnel {\n      matricule\n      noma\n      pnoma\n      grade {\n        grade\n        libGradeAr\n        libGradeArDetermine\n      }\n      arme {\n        id\n        libArmeAr\n      }\n    }\n    thumbnails {\n      id\n      thumbSize\n      thumbData\n    }\n  }\n}": types.GetPhotoByMatriculeAndSizeDocument,
    "query searchUsersByToken($searchToken: String, $pageable: PaginationInput) {\n  searchUsersByToken(searchToken: $searchToken, pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      id\n      personnel {\n        id\n        arme {\n          id\n        }\n        grade {\n          grade\n        }\n        nom\n        pnom\n        noma\n        pnoma\n      }\n    }\n  }\n}": types.SearchUsersByTokenDocument,
    "mutation createSimulation($simulationDto: SimulationDtoInput) {\n  createSimulation(simulationDto: $simulationDto) {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nmutation setNumberOfSteps($simulationId: Long, $steps: Int!) {\n  setNumberOfSteps(simulationId: $simulationId, steps: $steps)\n}\n\nmutation startSimulation($simulationId: Long) {\n  startSimulation(simulationId: $simulationId)\n}\n\nmutation createSimAgent($simAgentDto: SimAgentDtoInput) {\n  createSimAgent(simAgentDto: $simAgentDto) {\n    simAgentId {\n      step\n      id\n    }\n  }\n}\n\nquery simulationById($simulationId: Long) {\n  simulationById(simulationId: $simulationId) {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nquery simulations {\n  simulations {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nquery simAgentsByStepAndSimulation($simulaitonId: Long, $pageable: PaginationInput, $step: Int!) {\n  simAgentsByStepAndSimulation(\n    simulationId: $simulaitonId\n    pageable: $pageable\n    step: $step\n  ) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      arme {\n        id\n        libArmeAr\n        libArmeFr\n      }\n      nom\n      pnom\n      noma\n      pnoma\n      age\n      anicenneteGrade\n      anneDeService\n      class_\n      nombreDeProposition\n      simAgentId {\n        id\n        step\n      }\n      typeRecrutement\n    }\n  }\n}\n\nmutation deleteSimAgent($simAgentId: SimAgentIdInput) {\n  deleteSimAgent(simAgentId: $simAgentId)\n}\n\nmutation createRecrutement($recrutemnt: RecrutementDtoInput) {\n  createRecrutement(recrutementDto: $recrutemnt) {\n    id\n    typeRecrutement\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nmutation updateRecrutemntNombre($nombre: Int!, $recrutmentId: Long) {\n  updateRecrutemntNombre(nomber: $nombre, recrutemntId: $recrutmentId)\n}\n\nmutation deleteRecrutement($recrutmentId: Long) {\n  deleteRecrutement(recrutementId: $recrutmentId)\n}\n\nquery allRecrutemnts {\n  allRecrutemnts {\n    nombre\n    anneDeRecrutemnt\n    typeRecrutement\n    id\n  }\n}\n\nquery recrutementByClass($class: Int!, $simulationId: Long) {\n  recrutementByClass(class_: $class, simulationId: $simulationId) {\n    id\n    typeRecrutement\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nquery recrutementByTypeRecrutement($typeRecrutment: TypeRecrutement, $simulationId: Long) {\n  recrutementByTypeRecrutement(\n    typeRecrutement: $typeRecrutment\n    simulationId: $simulationId\n  ) {\n    typeRecrutement\n    nombre\n    anneDeRecrutemnt\n    id\n  }\n}\n\nquery recrutementByTypeRecrutementAndClass($typeRecrutment: TypeRecrutement, $classe: Int!, $simulationId: Long) {\n  recrutementByTypeRecrutementAndClass(\n    typeRecrutement: $typeRecrutment\n    classe_: $classe\n    simulationId: $simulationId\n  ) {\n    typeRecrutement\n    id\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nquery allRecrutemntsBySimulation($simulationId: Long) {\n  allRecrutemntsBySimulation(simulationId: $simulationId) {\n    nombre\n    anneDeRecrutemnt\n    id\n    typeRecrutement\n    simulation {\n      id\n      name\n      description\n    }\n  }\n}\n\nmutation createRecrutementV2($recrutemnt: RecrutementV2DtoInput) {\n  createRecrutementV2(recrutementV2Dto: $recrutemnt) {\n    anneDeRecrutemnt\n    EMP\n    FF\n    FS_L\n    FS_M\n    simulation {\n      id\n      description\n      name\n    }\n  }\n}\n\nmutation updateRecrutemntV2($recrutementV2Dto: RecrutementV2DtoInput) {\n  updateRecrutemntV2(recrutementV2Dto: $recrutementV2Dto)\n}\n\nmutation deleteRecrutementV2($recrutmentId: Int!) {\n  deleteRecrutementV2(recrutementId: $recrutmentId)\n}\n\nquery allRecrutemntsV2 {\n  allRecrutemntsV2 {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery recrutementV2ByClass($class: Int!, $simulationId: Long) {\n  recrutementV2ByClass(class_: $class, simulationId: $simulationId) {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery allRecrutemntsV2BySimulation($simulationId: Long) {\n  allRecrutemntsV2BySimulation(simulationId: $simulationId) {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}": types.CreateSimulationDocument,
    "query gradeById($id: Long) {\n  gradeById(gradeId: $id) {\n    abrGradeAr\n    abrGradeFr\n    grade\n    gradeInf\n    libGradeAr\n    libGradeFr\n    rhRCatGrade {\n      cat\n      catGrade\n      libCatAr\n      libCatFr\n      libCatGradeAr\n      libCatGradeFr\n    }\n  }\n}\n\nquery allGrades {\n  allGrades {\n    grade\n    libGradeFr\n    libGradeAr\n    abrGradeFr\n    abrGradeAr\n    gradeInf\n  }\n}\n\nquery allGradesWithCategrie {\n  allGrades {\n    grade\n    libGradeFr\n    libGradeAr\n    abrGradeFr\n    abrGradeAr\n    gradeInf\n    rhRCatGrade {\n      catGrade\n      cat\n      libCatGradeFr\n      libCatGradeAr\n      libCatFr\n      libCatAr\n    }\n  }\n}\n\nquery armeById($id: Long) {\n  armeById(armeId: $id) {\n    id\n    libArmeAr\n    libArmeFr\n    commandement {\n      id\n      libCommandementAr\n      libCommandementFr\n    }\n  }\n}\n\nquery allArmes {\n  allArmes {\n    id\n    libArmeFr\n    libArmeAr\n  }\n}\n\nquery commandementById($id: BigInteger) {\n  commandementById(id: $id) {\n    id\n    libCommandementFr\n    libCommandementAr\n    RArmes {\n      id\n      libArmeAr\n      libArmeFr\n    }\n  }\n}\n\nquery allCommandemnets {\n  allCommandements {\n    id\n    libCommandementAr\n    libCommandementFr\n  }\n}": types.GradeByIdDocument,
    "query findOcrResultEntityESbyId($fildId: String) {\n  findOcrResultEntityESbyId(fileId: $fildId) {\n    dateReference\n    reference\n    id\n    libConfidentialiteAr\n    libTypeTexteAr\n    libUrgenceAr\n    numberOfPapers\n    originalFileName\n    owner\n    pages {\n      bbox {\n        x1\n        x2\n        y1\n        y2\n      }\n      id_page\n      type\n      paragraphs {\n        bbox {\n          x1\n          x2\n          y1\n          y2\n        }\n        id_par\n        lang\n        type\n      }\n    }\n  }\n}\n\nquery isFavorite($ocrResultId: String, $userName: String) {\n  favorite(ocrResultId: $ocrResultId, userName: $userName)\n}\n\nmutation toggleFavorite($ocrResultId: String) {\n  toggleFavorite(ocrResultId: $ocrResultId)\n}": types.FindOcrResultEntityESbyIdDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query allProjects {\n  allProjects {\n    id\n    description\n    nameAr\n    members {\n      personnel {\n        id\n        nom\n        pnom\n        noma\n        pnoma\n        matricule\n      }\n    }\n    name\n  }\n}\n\nquery bugProjectById($projectId: Long) {\n  projectById(id: $projectId) {\n    id\n    name\n    nameAr\n    description\n    members {\n      id\n      personnel {\n        noma\n        pnoma\n        nom\n        pnom\n        matricule\n        grade {\n          grade\n        }\n      }\n    }\n  }\n}\n\nquery bugAllStatuses {\n  allStatus {\n    id\n    statusAn\n    statusAr\n    statusFr\n  }\n}\n\nquery getAllIssuesByProjectPaged($pageRequest: PaginationInput, $projectId: Long) {\n  allIssuesByProject(pageRequest: $pageRequest, projectId: $projectId) {\n    pageable {\n      pageNumber\n      pageSize\n      sort {\n        orders {\n          direction\n          property\n        }\n      }\n    }\n    content {\n      id\n      description\n      title\n      issueType {\n        id\n        typeAr\n        typeFr\n        typeAn\n      }\n      sevirity {\n        id\n        sevirityFR\n        sevirityAR\n      }\n      priority {\n        id\n        priorityFR\n        priorityAR\n      }\n      comments {\n        id\n        createdDate\n        text\n        createdBy {\n          personnel {\n            matricule\n            nom\n            noma\n            pnom\n            pnoma\n          }\n        }\n      }\n      assignee {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n      }\n      status {\n        id\n        statusFr\n        statusAr\n      }\n      creator {\n        personnel {\n          matricule\n          noma\n          pnoma\n          nom\n          pnom\n          grade {\n            grade\n            abrGradeAr\n            abrGradeFr\n            libGradeAr\n            libGradeFr\n          }\n          arme {\n            id\n            libArmeFr\n            libArmeAr\n          }\n        }\n      }\n      tags {\n        name\n        id\n      }\n      attachments {\n        id\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery allPriorities {\n  allPriorities {\n    id\n    priorityAR\n    priorityFR\n  }\n}\n\nquery allSeverities {\n  allSeverities {\n    id\n    sevirityAR\n    sevirityFR\n  }\n}\n\nquery allTags {\n  allTags {\n    id\n    name\n  }\n}\n\nquery issueById($issueId: Long) {\n  issueById(id: $issueId) {\n    id\n    description\n    title\n    dateCreation\n    issueType {\n      id\n      typeAr\n      typeFr\n      typeAn\n    }\n    sevirity {\n      id\n      sevirityFR\n      sevirityAR\n    }\n    priority {\n      id\n      priorityFR\n      priorityAR\n    }\n    comments {\n      id\n      createdDate\n      text\n      createdBy {\n        personnel {\n          matricule\n          nom\n          noma\n          pnom\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n    }\n    assignee {\n      personnel {\n        matricule\n        nom\n        pnom\n        noma\n        pnoma\n      }\n    }\n    status {\n      id\n      statusFr\n      statusAr\n    }\n    creator {\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n        grade {\n          libGradeAr\n          libGradeFr\n          grade\n        }\n      }\n    }\n    attachments {\n      id\n    }\n    tags {\n      id\n      name\n    }\n    comments {\n      text\n      id\n      createdDate\n      createdBy {\n        personnel {\n          nom\n          noma\n          pnom\n          pnoma\n          matricule\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getStatusById($statusId: Long) {\n  satusById(satusId: $statusId) {\n    id\n    statusAr\n    statusFr\n    statusAn\n  }\n}\n\nquery getIssueTypeById($typeId: Long) {\n  issueTypeById(typeId: $typeId) {\n    id\n    typeAn\n    typeFr\n    typeAr\n  }\n}\n\nquery allIssueTypes {\n  allIssueTypes {\n    id\n    typeAn\n    typeAr\n    typeFr\n  }\n}\n\nquery sevirityById($sevirityId: Long) {\n  sevirityById(sevirityId: $sevirityId) {\n    id\n    sevirityAR\n    sevirityFR\n  }\n}\n\nquery attachmentById($id: Long) {\n  attachmentById(id: $id) {\n    id\n    mimeType\n    base64FileData\n    issueId\n    originalFileName\n    size\n  }\n}\n\nquery attachmentsByIssue($id: Long) {\n  attachmentsByIssue(issueId: $id) {\n    issueId\n    id\n    size\n    originalFileName\n    base64FileData\n    mimeType\n  }\n}\n\nquery allStatuseCount($projectId: Long) {\n  allStatuseCount(projectId: $projectId) {\n    id\n    statusAn\n    statusFr\n    statusAr\n    count_\n  }\n}\n\nquery allIssueTypesCount($projectId: Long) {\n  allIssueTypesCount(projectId: $projectId) {\n    count_\n    id\n    typeAn\n    typeFr\n    typeAr\n  }\n}\n\nquery searchIssues($issueStatusId: Long, $issueTypeId: Long, $priorityId: Long, $pageable: PaginationInput, $projectId: Long) {\n  searchIssues(\n    issueStatusId: $issueStatusId\n    issueTypeId: $issueTypeId\n    priorityId: $priorityId\n    pageable: $pageable\n    projectId: $projectId\n  ) {\n    pageable {\n      pageNumber\n      pageSize\n      sort {\n        orders {\n          direction\n          property\n        }\n      }\n    }\n    content {\n      id\n      description\n      title\n      dateCreation\n      issueType {\n        id\n        typeAr\n        typeFr\n        typeAn\n      }\n      sevirity {\n        id\n        sevirityFR\n        sevirityAR\n      }\n      priority {\n        id\n        priorityFR\n        priorityAR\n      }\n      comments {\n        id\n        createdDate\n        text\n        createdBy {\n          personnel {\n            matricule\n            nom\n            noma\n            pnom\n            pnoma\n          }\n        }\n      }\n      assignee {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n      }\n      status {\n        id\n        statusFr\n        statusAr\n      }\n      creator {\n        personnel {\n          matricule\n          noma\n          pnoma\n          nom\n          pnom\n          grade {\n            grade\n            abrGradeAr\n            abrGradeFr\n            libGradeAr\n            libGradeFr\n          }\n          arme {\n            id\n            libArmeFr\n            libArmeAr\n          }\n        }\n      }\n      tags {\n        name\n        id\n      }\n      attachments {\n        id\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nmutation createIssue($issue: IssueInputDtoInput) {\n  createIssue(issueInputDto: $issue) {\n    id\n    title\n    description\n    priority {\n      id\n      priorityFR\n      priorityAR\n    }\n    status {\n      id\n      statusAr\n      statusFr\n      statusAn\n    }\n    tags {\n      id\n      name\n    }\n    sevirity {\n      id\n      sevirityFR\n      sevirityAR\n    }\n    issueType {\n      typeFr\n      typeAr\n      typeAn\n      id\n    }\n  }\n}\n\nmutation updateIssueType($issueId: Long, $typeId: Long) {\n  updateIssueType(issueId: $issueId, typeId: $typeId) {\n    id\n  }\n}\n\nmutation updateIssueStatus($issueId: Long, $statusId: Long) {\n  updateIssueStatus(issueId: $issueId, statusId: $statusId) {\n    id\n  }\n}\n\nmutation updateIssueSevirity($issueId: Long, $sevirityId: Long) {\n  updateIssueSevirity(issueId: $issueId, sevirityId: $sevirityId) {\n    id\n  }\n}\n\nmutation deleteIssueComment($commentId: Long) {\n  deleteIssueComment(commentId: $commentId)\n}\n\nmutation updateIssueComment($commentId: Long, $text: String) {\n  updateIssueComment(commentId: $commentId, text: $text) {\n    text\n    id\n    createdDate\n    createdBy {\n      personnel {\n        nom\n        noma\n        pnom\n        pnoma\n        matricule\n        grade {\n          grade\n          libGradeFr\n          libGradeAr\n        }\n      }\n    }\n  }\n}\n\nmutation createIssueComment($text: String, $issueId: Long) {\n  createIssueComment(text: $text, issueId: $issueId) {\n    text\n    id\n    createdDate\n    createdBy {\n      personnel {\n        nom\n        noma\n        pnom\n        pnoma\n        matricule\n        grade {\n          grade\n          libGradeFr\n          libGradeAr\n        }\n      }\n    }\n  }\n}\n\nmutation addIssueTag($issueId: Long, $tagname: String) {\n  addIssueTag(issueId: $issueId, tagname: $tagname)\n}\n\nquery notifications($pageable: PaginationInput, $user: String) {\n  allNotifications(pageable: $pageable, userName: $user) {\n    pageable {\n      pageSize\n      pageNumber\n    }\n    totalElements\n    content {\n      id\n      dateTime\n      emmitter {\n        personnel {\n          noma\n          pnoma\n          nom\n          pnom\n          matricule\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n          }\n        }\n      }\n      issue {\n        id\n        title\n        issueType {\n          id\n          typeAr\n          typeFr\n        }\n      }\n      notificationType {\n        id\n        libAr\n        libFr\n      }\n      state\n    }\n  }\n}\n\nmutation changeNotificationState($notificationState: NotificationState, $notificationId: Long) {\n  changeNotificationState(\n    notificationId: $notificationId\n    notificationState: $notificationState\n  )\n}"): (typeof documents)["query allProjects {\n  allProjects {\n    id\n    description\n    nameAr\n    members {\n      personnel {\n        id\n        nom\n        pnom\n        noma\n        pnoma\n        matricule\n      }\n    }\n    name\n  }\n}\n\nquery bugProjectById($projectId: Long) {\n  projectById(id: $projectId) {\n    id\n    name\n    nameAr\n    description\n    members {\n      id\n      personnel {\n        noma\n        pnoma\n        nom\n        pnom\n        matricule\n        grade {\n          grade\n        }\n      }\n    }\n  }\n}\n\nquery bugAllStatuses {\n  allStatus {\n    id\n    statusAn\n    statusAr\n    statusFr\n  }\n}\n\nquery getAllIssuesByProjectPaged($pageRequest: PaginationInput, $projectId: Long) {\n  allIssuesByProject(pageRequest: $pageRequest, projectId: $projectId) {\n    pageable {\n      pageNumber\n      pageSize\n      sort {\n        orders {\n          direction\n          property\n        }\n      }\n    }\n    content {\n      id\n      description\n      title\n      issueType {\n        id\n        typeAr\n        typeFr\n        typeAn\n      }\n      sevirity {\n        id\n        sevirityFR\n        sevirityAR\n      }\n      priority {\n        id\n        priorityFR\n        priorityAR\n      }\n      comments {\n        id\n        createdDate\n        text\n        createdBy {\n          personnel {\n            matricule\n            nom\n            noma\n            pnom\n            pnoma\n          }\n        }\n      }\n      assignee {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n      }\n      status {\n        id\n        statusFr\n        statusAr\n      }\n      creator {\n        personnel {\n          matricule\n          noma\n          pnoma\n          nom\n          pnom\n          grade {\n            grade\n            abrGradeAr\n            abrGradeFr\n            libGradeAr\n            libGradeFr\n          }\n          arme {\n            id\n            libArmeFr\n            libArmeAr\n          }\n        }\n      }\n      tags {\n        name\n        id\n      }\n      attachments {\n        id\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery allPriorities {\n  allPriorities {\n    id\n    priorityAR\n    priorityFR\n  }\n}\n\nquery allSeverities {\n  allSeverities {\n    id\n    sevirityAR\n    sevirityFR\n  }\n}\n\nquery allTags {\n  allTags {\n    id\n    name\n  }\n}\n\nquery issueById($issueId: Long) {\n  issueById(id: $issueId) {\n    id\n    description\n    title\n    dateCreation\n    issueType {\n      id\n      typeAr\n      typeFr\n      typeAn\n    }\n    sevirity {\n      id\n      sevirityFR\n      sevirityAR\n    }\n    priority {\n      id\n      priorityFR\n      priorityAR\n    }\n    comments {\n      id\n      createdDate\n      text\n      createdBy {\n        personnel {\n          matricule\n          nom\n          noma\n          pnom\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n    }\n    assignee {\n      personnel {\n        matricule\n        nom\n        pnom\n        noma\n        pnoma\n      }\n    }\n    status {\n      id\n      statusFr\n      statusAr\n    }\n    creator {\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n        grade {\n          libGradeAr\n          libGradeFr\n          grade\n        }\n      }\n    }\n    attachments {\n      id\n    }\n    tags {\n      id\n      name\n    }\n    comments {\n      text\n      id\n      createdDate\n      createdBy {\n        personnel {\n          nom\n          noma\n          pnom\n          pnoma\n          matricule\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getStatusById($statusId: Long) {\n  satusById(satusId: $statusId) {\n    id\n    statusAr\n    statusFr\n    statusAn\n  }\n}\n\nquery getIssueTypeById($typeId: Long) {\n  issueTypeById(typeId: $typeId) {\n    id\n    typeAn\n    typeFr\n    typeAr\n  }\n}\n\nquery allIssueTypes {\n  allIssueTypes {\n    id\n    typeAn\n    typeAr\n    typeFr\n  }\n}\n\nquery sevirityById($sevirityId: Long) {\n  sevirityById(sevirityId: $sevirityId) {\n    id\n    sevirityAR\n    sevirityFR\n  }\n}\n\nquery attachmentById($id: Long) {\n  attachmentById(id: $id) {\n    id\n    mimeType\n    base64FileData\n    issueId\n    originalFileName\n    size\n  }\n}\n\nquery attachmentsByIssue($id: Long) {\n  attachmentsByIssue(issueId: $id) {\n    issueId\n    id\n    size\n    originalFileName\n    base64FileData\n    mimeType\n  }\n}\n\nquery allStatuseCount($projectId: Long) {\n  allStatuseCount(projectId: $projectId) {\n    id\n    statusAn\n    statusFr\n    statusAr\n    count_\n  }\n}\n\nquery allIssueTypesCount($projectId: Long) {\n  allIssueTypesCount(projectId: $projectId) {\n    count_\n    id\n    typeAn\n    typeFr\n    typeAr\n  }\n}\n\nquery searchIssues($issueStatusId: Long, $issueTypeId: Long, $priorityId: Long, $pageable: PaginationInput, $projectId: Long) {\n  searchIssues(\n    issueStatusId: $issueStatusId\n    issueTypeId: $issueTypeId\n    priorityId: $priorityId\n    pageable: $pageable\n    projectId: $projectId\n  ) {\n    pageable {\n      pageNumber\n      pageSize\n      sort {\n        orders {\n          direction\n          property\n        }\n      }\n    }\n    content {\n      id\n      description\n      title\n      dateCreation\n      issueType {\n        id\n        typeAr\n        typeFr\n        typeAn\n      }\n      sevirity {\n        id\n        sevirityFR\n        sevirityAR\n      }\n      priority {\n        id\n        priorityFR\n        priorityAR\n      }\n      comments {\n        id\n        createdDate\n        text\n        createdBy {\n          personnel {\n            matricule\n            nom\n            noma\n            pnom\n            pnoma\n          }\n        }\n      }\n      assignee {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n      }\n      status {\n        id\n        statusFr\n        statusAr\n      }\n      creator {\n        personnel {\n          matricule\n          noma\n          pnoma\n          nom\n          pnom\n          grade {\n            grade\n            abrGradeAr\n            abrGradeFr\n            libGradeAr\n            libGradeFr\n          }\n          arme {\n            id\n            libArmeFr\n            libArmeAr\n          }\n        }\n      }\n      tags {\n        name\n        id\n      }\n      attachments {\n        id\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nmutation createIssue($issue: IssueInputDtoInput) {\n  createIssue(issueInputDto: $issue) {\n    id\n    title\n    description\n    priority {\n      id\n      priorityFR\n      priorityAR\n    }\n    status {\n      id\n      statusAr\n      statusFr\n      statusAn\n    }\n    tags {\n      id\n      name\n    }\n    sevirity {\n      id\n      sevirityFR\n      sevirityAR\n    }\n    issueType {\n      typeFr\n      typeAr\n      typeAn\n      id\n    }\n  }\n}\n\nmutation updateIssueType($issueId: Long, $typeId: Long) {\n  updateIssueType(issueId: $issueId, typeId: $typeId) {\n    id\n  }\n}\n\nmutation updateIssueStatus($issueId: Long, $statusId: Long) {\n  updateIssueStatus(issueId: $issueId, statusId: $statusId) {\n    id\n  }\n}\n\nmutation updateIssueSevirity($issueId: Long, $sevirityId: Long) {\n  updateIssueSevirity(issueId: $issueId, sevirityId: $sevirityId) {\n    id\n  }\n}\n\nmutation deleteIssueComment($commentId: Long) {\n  deleteIssueComment(commentId: $commentId)\n}\n\nmutation updateIssueComment($commentId: Long, $text: String) {\n  updateIssueComment(commentId: $commentId, text: $text) {\n    text\n    id\n    createdDate\n    createdBy {\n      personnel {\n        nom\n        noma\n        pnom\n        pnoma\n        matricule\n        grade {\n          grade\n          libGradeFr\n          libGradeAr\n        }\n      }\n    }\n  }\n}\n\nmutation createIssueComment($text: String, $issueId: Long) {\n  createIssueComment(text: $text, issueId: $issueId) {\n    text\n    id\n    createdDate\n    createdBy {\n      personnel {\n        nom\n        noma\n        pnom\n        pnoma\n        matricule\n        grade {\n          grade\n          libGradeFr\n          libGradeAr\n        }\n      }\n    }\n  }\n}\n\nmutation addIssueTag($issueId: Long, $tagname: String) {\n  addIssueTag(issueId: $issueId, tagname: $tagname)\n}\n\nquery notifications($pageable: PaginationInput, $user: String) {\n  allNotifications(pageable: $pageable, userName: $user) {\n    pageable {\n      pageSize\n      pageNumber\n    }\n    totalElements\n    content {\n      id\n      dateTime\n      emmitter {\n        personnel {\n          noma\n          pnoma\n          nom\n          pnom\n          matricule\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n          }\n        }\n      }\n      issue {\n        id\n        title\n        issueType {\n          id\n          typeAr\n          typeFr\n        }\n      }\n      notificationType {\n        id\n        libAr\n        libFr\n      }\n      state\n    }\n  }\n}\n\nmutation changeNotificationState($notificationState: NotificationState, $notificationId: Long) {\n  changeNotificationState(\n    notificationId: $notificationId\n    notificationState: $notificationState\n  )\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query findPam2024($pageable: PaginationInput, $filteringParams: FilteringParamsInput) {\n  findPam2024(pageable: $pageable, filteringParams: $filteringParams) {\n    pageable {\n      pageSize\n      pageNumber\n      sort {\n        orders {\n          property\n          direction\n        }\n      }\n    }\n    totalElements\n    totalPages\n    content {\n      grade\n      g\n      noma\n      pnoma\n      libArmeAr\n      arme\n      matricule\n      personnelNotes {\n        id\n      }\n      structureSn {\n        id\n        typeStructureSn {\n          id\n        }\n        runite {\n          id\n          libUniteeAr\n          abreviationAr\n          abreviationFr\n          regionMilitaire {\n            id\n            libRegionFr\n            libRegionAr\n            libAbrRegionAr\n            libAbrRegionFr\n          }\n        }\n      }\n      dureeN\n      dureeS\n      libArmeAr\n      fonction\n      ensFonction\n      ens\n      NMutation\n      NDureeS\n      poste\n      csn\n      promotionNumber\n      DUREE_FONCT\n      ficheVoeuxes {\n        id {\n          matricule\n          annee\n        }\n        rhRunite1 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n        rhRunite2 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n        rhRunite3 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n      }\n      demandeRadiations {\n        dateDemande\n        id\n      }\n      dip_civ\n      dip_mil\n      code_dip_civ\n      code_dip_mil\n      formation\n      obs\n      dip_mil\n      dipmil {\n        abrFr\n        codeDipMil\n      }\n      dipcivil {\n        abrFr\n      }\n    }\n  }\n}\n\nquery findPamOff2024ById($id: String) {\n  findPamOff2024ById(id: $id) {\n    grade\n    g\n    noma\n    pnoma\n    libArmeAr\n    arme\n    matricule\n    personnelNotes {\n      id\n    }\n    structureSn {\n      id\n      typeStructureSn {\n        id\n      }\n      runite {\n        id\n        libUniteeAr\n        abreviationAr\n        abreviationFr\n        regionMilitaire {\n          id\n          libRegionFr\n          libRegionAr\n          libAbrRegionAr\n          libAbrRegionFr\n        }\n      }\n    }\n    dureeN\n    dureeS\n    libArmeAr\n    fonction\n    ensFonction\n    ens\n    NMutation\n    NDureeS\n    poste\n    csn\n    promotionNumber\n    DUREE_FONCT\n    ficheVoeuxes {\n      id {\n        matricule\n        annee\n      }\n      rhRunite1 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n      rhRunite2 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n      rhRunite3 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n    }\n    demandeRadiations {\n      dateDemande\n      id\n    }\n    dip_civ\n    dip_mil\n    code_dip_civ\n    code_dip_mil\n    formation\n    obs\n    dipmil {\n      abrFr\n    }\n    dipcivil {\n      abrFr\n    }\n  }\n}\n\nquery findDistinctArmes {\n  findDistinctArmes {\n    idArme\n    libArme\n    count_\n  }\n}\n\nquery findDistinctGrade {\n  findDistinctGrade {\n    grade\n    g\n    count_\n  }\n}\n\nquery findDistinctPostes {\n  findDistinctPostes {\n    poste\n    count_\n    trie_\n  }\n}\n\nquery findDistinctDiplomesCiviles {\n  findDistinctDiplomesCiviles {\n    codeDipCiv\n    abrFr\n    abrAr\n    libFr\n    libFr\n    count_\n  }\n}\n\nquery findDistinctDiplomesMilitaires {\n  findDistinctDiplomesMilitaires {\n    codeDipMil\n    abrAr\n    abrFr\n    libFr\n    libAr\n    count_\n  }\n}\n\nquery findBy($name: ReportNames) {\n  findReportById(name: $name) {\n    obs\n    fileName\n    nomAR\n    nomFR\n  }\n}\n\nquery allReports {\n  allReports {\n    nomFR\n    nomAR\n    fileName\n    obs\n    get_order\n  }\n}\n\nquery findDistinctCsn {\n  findDistinctCsn {\n    count_\n    c\n    csn\n  }\n}\n\nquery reportPosteRealise {\n  reportPosteRealise {\n    poste\n    realise\n    ted\n    pourcentage\n  }\n}\n\nquery getReport($reportName: ReportNames, $format: ReportFormats, $reportsSubFolder: ReportsSubFolder) {\n  report(\n    reportName: $reportName\n    format: $format\n    reportsSubFolder: $reportsSubFolder\n  )\n}\n\nquery allRegionsMilitaires {\n  allRegionsMilitaires {\n    id\n    libRegionFr\n    libRegionAr\n    libAbrRegionAr\n    libAbrRegionFr\n    trie\n  }\n}\n\nquery findRStructureSnById($id: String) {\n  findRStructureSnById(id: $id) {\n    id\n    pere {\n      id\n    }\n    typeStructureSn {\n      id\n      libAr\n    }\n    runite {\n      id\n      abreviationAr\n      abreviationFr\n      libUniteeAr\n      libUniteeFr\n      regionMilitaire {\n        id\n        libAbrRegionAr\n        libAbrRegionFr\n      }\n    }\n    fils {\n      id\n      pere {\n        id\n      }\n      typeStructureSn {\n        id\n        libAr\n      }\n      runite {\n        id\n        abreviationAr\n        abreviationFr\n        libUniteeAr\n        libUniteeFr\n        regionMilitaire {\n          id\n          libAbrRegionAr\n          libAbrRegionFr\n        }\n      }\n      fils {\n        id\n        pere {\n          id\n        }\n        typeStructureSn {\n          id\n          libAr\n        }\n        runite {\n          id\n          abreviationAr\n          abreviationFr\n          libUniteeAr\n          libUniteeFr\n          regionMilitaire {\n            id\n            libAbrRegionAr\n            libAbrRegionFr\n          }\n        }\n        fils {\n          id\n          pere {\n            id\n          }\n          typeStructureSn {\n            id\n            libAr\n          }\n          runite {\n            id\n            abreviationAr\n            abreviationFr\n            libUniteeAr\n            libUniteeFr\n            regionMilitaire {\n              id\n              libAbrRegionAr\n              libAbrRegionFr\n            }\n          }\n          fils {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation addDemandeRadiation($matricule: String) {\n  addDemandeRadiation(matricule: $matricule)\n}\n\nmutation deleteDemandeRadiation($id: Long) {\n  deleteDemandeRadiation(id: $id)\n}\n\nquery photoByMaticuleWithThumbs($matricule: String) {\n  photoByMatricule(matricule: $matricule) {\n    id\n    photoData\n    format\n    translateX\n    translateY\n    rotation\n    width\n    height\n    personnel {\n      id\n      matricule\n      noma\n      pnoma\n    }\n    thumbnails {\n      thumbData\n      id\n      thumbSize\n    }\n  }\n}\n\nmutation createPhoto($ff: PhotoInput) {\n  createPhoto(photoInput: $ff) {\n    photo {\n      photoData\n      format\n      width\n      height\n      translateY\n      translateY\n      rotation\n      id\n    }\n    rect {\n      x\n      y\n      width\n      height\n    }\n  }\n}\n\nmutation updatePersonnelNoteGrantedUsers($PsesonnelNoteId: Long, $userIds: [String]) {\n  updatePersonnelNoteGrantedUsers(\n    PsesonnelNoteId: $PsesonnelNoteId\n    userIds: $userIds\n  )\n}\n\nmutation createPersonnelNote($note: PersonnelNoteInput) {\n  createPersonnelNote(note: $note)\n}"): (typeof documents)["query findPam2024($pageable: PaginationInput, $filteringParams: FilteringParamsInput) {\n  findPam2024(pageable: $pageable, filteringParams: $filteringParams) {\n    pageable {\n      pageSize\n      pageNumber\n      sort {\n        orders {\n          property\n          direction\n        }\n      }\n    }\n    totalElements\n    totalPages\n    content {\n      grade\n      g\n      noma\n      pnoma\n      libArmeAr\n      arme\n      matricule\n      personnelNotes {\n        id\n      }\n      structureSn {\n        id\n        typeStructureSn {\n          id\n        }\n        runite {\n          id\n          libUniteeAr\n          abreviationAr\n          abreviationFr\n          regionMilitaire {\n            id\n            libRegionFr\n            libRegionAr\n            libAbrRegionAr\n            libAbrRegionFr\n          }\n        }\n      }\n      dureeN\n      dureeS\n      libArmeAr\n      fonction\n      ensFonction\n      ens\n      NMutation\n      NDureeS\n      poste\n      csn\n      promotionNumber\n      DUREE_FONCT\n      ficheVoeuxes {\n        id {\n          matricule\n          annee\n        }\n        rhRunite1 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n        rhRunite2 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n        rhRunite3 {\n          id\n          regionMilitaire {\n            id\n            libAbrRegionFr\n            libAbrRegionAr\n            libRegionAr\n            libRegionFr\n          }\n          libUniteeAr\n          abreviationFr\n          abreviationAr\n        }\n      }\n      demandeRadiations {\n        dateDemande\n        id\n      }\n      dip_civ\n      dip_mil\n      code_dip_civ\n      code_dip_mil\n      formation\n      obs\n      dip_mil\n      dipmil {\n        abrFr\n        codeDipMil\n      }\n      dipcivil {\n        abrFr\n      }\n    }\n  }\n}\n\nquery findPamOff2024ById($id: String) {\n  findPamOff2024ById(id: $id) {\n    grade\n    g\n    noma\n    pnoma\n    libArmeAr\n    arme\n    matricule\n    personnelNotes {\n      id\n    }\n    structureSn {\n      id\n      typeStructureSn {\n        id\n      }\n      runite {\n        id\n        libUniteeAr\n        abreviationAr\n        abreviationFr\n        regionMilitaire {\n          id\n          libRegionFr\n          libRegionAr\n          libAbrRegionAr\n          libAbrRegionFr\n        }\n      }\n    }\n    dureeN\n    dureeS\n    libArmeAr\n    fonction\n    ensFonction\n    ens\n    NMutation\n    NDureeS\n    poste\n    csn\n    promotionNumber\n    DUREE_FONCT\n    ficheVoeuxes {\n      id {\n        matricule\n        annee\n      }\n      rhRunite1 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n      rhRunite2 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n      rhRunite3 {\n        id\n        regionMilitaire {\n          id\n          libAbrRegionFr\n          libAbrRegionAr\n          libRegionAr\n          libRegionFr\n        }\n        libUniteeAr\n        abreviationFr\n        abreviationAr\n      }\n    }\n    demandeRadiations {\n      dateDemande\n      id\n    }\n    dip_civ\n    dip_mil\n    code_dip_civ\n    code_dip_mil\n    formation\n    obs\n    dipmil {\n      abrFr\n    }\n    dipcivil {\n      abrFr\n    }\n  }\n}\n\nquery findDistinctArmes {\n  findDistinctArmes {\n    idArme\n    libArme\n    count_\n  }\n}\n\nquery findDistinctGrade {\n  findDistinctGrade {\n    grade\n    g\n    count_\n  }\n}\n\nquery findDistinctPostes {\n  findDistinctPostes {\n    poste\n    count_\n    trie_\n  }\n}\n\nquery findDistinctDiplomesCiviles {\n  findDistinctDiplomesCiviles {\n    codeDipCiv\n    abrFr\n    abrAr\n    libFr\n    libFr\n    count_\n  }\n}\n\nquery findDistinctDiplomesMilitaires {\n  findDistinctDiplomesMilitaires {\n    codeDipMil\n    abrAr\n    abrFr\n    libFr\n    libAr\n    count_\n  }\n}\n\nquery findBy($name: ReportNames) {\n  findReportById(name: $name) {\n    obs\n    fileName\n    nomAR\n    nomFR\n  }\n}\n\nquery allReports {\n  allReports {\n    nomFR\n    nomAR\n    fileName\n    obs\n    get_order\n  }\n}\n\nquery findDistinctCsn {\n  findDistinctCsn {\n    count_\n    c\n    csn\n  }\n}\n\nquery reportPosteRealise {\n  reportPosteRealise {\n    poste\n    realise\n    ted\n    pourcentage\n  }\n}\n\nquery getReport($reportName: ReportNames, $format: ReportFormats, $reportsSubFolder: ReportsSubFolder) {\n  report(\n    reportName: $reportName\n    format: $format\n    reportsSubFolder: $reportsSubFolder\n  )\n}\n\nquery allRegionsMilitaires {\n  allRegionsMilitaires {\n    id\n    libRegionFr\n    libRegionAr\n    libAbrRegionAr\n    libAbrRegionFr\n    trie\n  }\n}\n\nquery findRStructureSnById($id: String) {\n  findRStructureSnById(id: $id) {\n    id\n    pere {\n      id\n    }\n    typeStructureSn {\n      id\n      libAr\n    }\n    runite {\n      id\n      abreviationAr\n      abreviationFr\n      libUniteeAr\n      libUniteeFr\n      regionMilitaire {\n        id\n        libAbrRegionAr\n        libAbrRegionFr\n      }\n    }\n    fils {\n      id\n      pere {\n        id\n      }\n      typeStructureSn {\n        id\n        libAr\n      }\n      runite {\n        id\n        abreviationAr\n        abreviationFr\n        libUniteeAr\n        libUniteeFr\n        regionMilitaire {\n          id\n          libAbrRegionAr\n          libAbrRegionFr\n        }\n      }\n      fils {\n        id\n        pere {\n          id\n        }\n        typeStructureSn {\n          id\n          libAr\n        }\n        runite {\n          id\n          abreviationAr\n          abreviationFr\n          libUniteeAr\n          libUniteeFr\n          regionMilitaire {\n            id\n            libAbrRegionAr\n            libAbrRegionFr\n          }\n        }\n        fils {\n          id\n          pere {\n            id\n          }\n          typeStructureSn {\n            id\n            libAr\n          }\n          runite {\n            id\n            abreviationAr\n            abreviationFr\n            libUniteeAr\n            libUniteeFr\n            regionMilitaire {\n              id\n              libAbrRegionAr\n              libAbrRegionFr\n            }\n          }\n          fils {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation addDemandeRadiation($matricule: String) {\n  addDemandeRadiation(matricule: $matricule)\n}\n\nmutation deleteDemandeRadiation($id: Long) {\n  deleteDemandeRadiation(id: $id)\n}\n\nquery photoByMaticuleWithThumbs($matricule: String) {\n  photoByMatricule(matricule: $matricule) {\n    id\n    photoData\n    format\n    translateX\n    translateY\n    rotation\n    width\n    height\n    personnel {\n      id\n      matricule\n      noma\n      pnoma\n    }\n    thumbnails {\n      thumbData\n      id\n      thumbSize\n    }\n  }\n}\n\nmutation createPhoto($ff: PhotoInput) {\n  createPhoto(photoInput: $ff) {\n    photo {\n      photoData\n      format\n      width\n      height\n      translateY\n      translateY\n      rotation\n      id\n    }\n    rect {\n      x\n      y\n      width\n      height\n    }\n  }\n}\n\nmutation updatePersonnelNoteGrantedUsers($PsesonnelNoteId: Long, $userIds: [String]) {\n  updatePersonnelNoteGrantedUsers(\n    PsesonnelNoteId: $PsesonnelNoteId\n    userIds: $userIds\n  )\n}\n\nmutation createPersonnelNote($note: PersonnelNoteInput) {\n  createPersonnelNote(note: $note)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query findPersonnelNoteById($id: Long) {\n  findPersonnelNoteById(id: $id) {\n    id\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    observation\n    color\n    user {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findPersonnelNotesByUserAndPersonnel($userId: String, $pesonnelId: String, $includeAllNotes: Boolean!) {\n  findPersonnelNotesByUserAndPersonnel(\n    userId: $userId\n    personnelId: $pesonnelId\n    includeAllNotes: $includeAllNotes\n  ) {\n    id\n    user {\n      id\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    dateCreation\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n        grade {\n          grade\n        }\n        arme {\n          id\n        }\n        pamOff2024 {\n          trieAnciennete\n        }\n      }\n    }\n    observation\n    color\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findPersonnelNotes {\n  findPersonnelNotes {\n    id\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    observation\n    color\n    user {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    dateCreation\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findAllPersonnelNotesPaged($pageable: PaginationInput, $searchParams: PersonnelNoteSearchParamsInput) {\n  findAllPersonnelNotesPaged(pageable: $pageable, searchParams: $searchParams) {\n    content {\n      id\n      pamOff2024 {\n        matricule\n        noma\n        pnoma\n        arme\n        personnel {\n          grade {\n            grade\n            libGradeArDetermine\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n      dateCreation\n      user {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeArDetermine\n            libGradeFr\n          }\n          arme {\n            id\n          }\n        }\n      }\n      observation\n      authorizedUsers {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n            libGradeArDetermine\n          }\n          arme {\n            id\n          }\n        }\n      }\n    }\n    totalPages\n    totalElements\n  }\n}\n\nquery findPersonnelNotesByUser($userId: String, $pageable: PaginationInput) {\n  findPersonnelNotesByUser(userId: $userId, pageable: $pageable) {\n    content {\n      id\n      pamOff2024 {\n        matricule\n        noma\n        pnoma\n        arme\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeArDetermine\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n      dateCreation\n      user {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeArDetermine\n            libGradeFr\n          }\n          arme {\n            id\n          }\n        }\n      }\n      observation\n      authorizedUsers {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n            libGradeArDetermine\n          }\n          arme {\n            id\n          }\n        }\n      }\n    }\n    totalPages\n    totalElements\n  }\n}\n\nmutation createPersonnelNote($note: PersonnelNoteInput) {\n  createPersonnelNote(note: $note)\n}\n\nmutation deletePersonnelNote($id: Long) {\n  deletePersonnelNote(id: $id)\n}\n\nmutation deleteAuthorizedUser($userName: String, $noteId: Long) {\n  deleteAuthorizedUser(userName: $userName, noteId: $noteId)\n}\n\nmutation updatePersonnelNoteContent($noteContent: String, $personnelId: Long) {\n  updatePersonnelNoteContent(\n    noteContent: $noteContent\n    personnelNoteId: $personnelId\n  )\n}"): (typeof documents)["query findPersonnelNoteById($id: Long) {\n  findPersonnelNoteById(id: $id) {\n    id\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    observation\n    color\n    user {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findPersonnelNotesByUserAndPersonnel($userId: String, $pesonnelId: String, $includeAllNotes: Boolean!) {\n  findPersonnelNotesByUserAndPersonnel(\n    userId: $userId\n    personnelId: $pesonnelId\n    includeAllNotes: $includeAllNotes\n  ) {\n    id\n    user {\n      id\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    dateCreation\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n        grade {\n          grade\n        }\n        arme {\n          id\n        }\n        pamOff2024 {\n          trieAnciennete\n        }\n      }\n    }\n    observation\n    color\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findPersonnelNotes {\n  findPersonnelNotes {\n    id\n    authorizedUsers {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    observation\n    color\n    user {\n      personnel {\n        matricule\n        noma\n        pnoma\n      }\n    }\n    dateCreation\n    pamOff2024 {\n      matricule\n      noma\n      pnoma\n    }\n  }\n}\n\nquery findAllPersonnelNotesPaged($pageable: PaginationInput, $searchParams: PersonnelNoteSearchParamsInput) {\n  findAllPersonnelNotesPaged(pageable: $pageable, searchParams: $searchParams) {\n    content {\n      id\n      pamOff2024 {\n        matricule\n        noma\n        pnoma\n        arme\n        personnel {\n          grade {\n            grade\n            libGradeArDetermine\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n      dateCreation\n      user {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeArDetermine\n            libGradeFr\n          }\n          arme {\n            id\n          }\n        }\n      }\n      observation\n      authorizedUsers {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n            libGradeArDetermine\n          }\n          arme {\n            id\n          }\n        }\n      }\n    }\n    totalPages\n    totalElements\n  }\n}\n\nquery findPersonnelNotesByUser($userId: String, $pageable: PaginationInput) {\n  findPersonnelNotesByUser(userId: $userId, pageable: $pageable) {\n    content {\n      id\n      pamOff2024 {\n        matricule\n        noma\n        pnoma\n        arme\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeArDetermine\n            libGradeAr\n            libGradeFr\n          }\n        }\n      }\n      dateCreation\n      user {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeAr\n            libGradeArDetermine\n            libGradeFr\n          }\n          arme {\n            id\n          }\n        }\n      }\n      observation\n      authorizedUsers {\n        id\n        personnel {\n          matricule\n          noma\n          pnoma\n          grade {\n            grade\n            libGradeFr\n            libGradeAr\n            libGradeArDetermine\n          }\n          arme {\n            id\n          }\n        }\n      }\n    }\n    totalPages\n    totalElements\n  }\n}\n\nmutation createPersonnelNote($note: PersonnelNoteInput) {\n  createPersonnelNote(note: $note)\n}\n\nmutation deletePersonnelNote($id: Long) {\n  deletePersonnelNote(id: $id)\n}\n\nmutation deleteAuthorizedUser($userName: String, $noteId: Long) {\n  deleteAuthorizedUser(userName: $userName, noteId: $noteId)\n}\n\nmutation updatePersonnelNoteContent($noteContent: String, $personnelId: Long) {\n  updatePersonnelNoteContent(\n    noteContent: $noteContent\n    personnelNoteId: $personnelId\n  )\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query findByMatricule($matricule: String) {\n  findByMatricule(matricule: $matricule) {\n    noteDiplome {\n      note\n      lib\n      id\n    }\n    ancienneteDansLeGrade\n    felicitations {\n      nombre\n      felicitation {\n        autorite\n        note\n      }\n    }\n    sanctions {\n      nombre\n      sanctions {\n        lib\n        note\n      }\n    }\n    anne\n    chef\n    dureeExcercice\n    ancienneteDansLeGrade\n    nombreDeProposition\n    noteArme\n    noteRegionale\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      arme {\n        id\n        libArmeAr\n        libArmeFr\n      }\n    }\n    noteRegionale\n  }\n}\n\nquery findAllPav($pageable: PaginationInput, $idGrade: Long) {\n  findAllPav(pageable: $pageable, idGrade: $idGrade) {\n    content {\n      noteDiplome {\n        note\n        lib\n        id\n      }\n      noteGlobale\n      ancienneteDansLeGrade\n      dureeExcerciceUnite\n      ponderation {\n        id\n      }\n      felicitations {\n        nombre\n        felicitation {\n          autorite\n          note\n        }\n        id {\n          felicitationsId\n          pavId\n        }\n      }\n      sanctions {\n        nombre\n        sanctions {\n          lib\n          note\n          id\n        }\n        id {\n          pavId\n          sanctionsId\n        }\n      }\n      anne\n      chef\n      dureeExcercice\n      ancienneteDansLeGrade\n      nombreDeProposition\n      noteArme\n      noteRegionale\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n        grade {\n          grade\n          libGradeAr\n          libGradeFr\n        }\n        arme {\n          id\n          libArmeAr\n          libArmeFr\n        }\n        pamOff2024 {\n          grade\n          g\n          noma\n          pnoma\n          libArmeAr\n          arme\n          matricule\n          personnelNotes {\n            id\n          }\n          structureSn {\n            id\n            typeStructureSn {\n              id\n            }\n            runite {\n              id\n              libUniteeAr\n              abreviationAr\n              abreviationFr\n              regionMilitaire {\n                id\n                libRegionFr\n                libRegionAr\n                libAbrRegionAr\n                libAbrRegionFr\n              }\n            }\n          }\n          dureeN\n          dureeS\n          libArmeAr\n          fonction\n          ensFonction\n          ens\n          NMutation\n          NDureeS\n          poste\n          csn\n          promotionNumber\n          DUREE_FONCT\n          ficheVoeuxes {\n            id {\n              matricule\n              annee\n            }\n            rhRunite1 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n            rhRunite2 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n            rhRunite3 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n          }\n          demandeRadiations {\n            dateDemande\n            id\n          }\n          dip_civ\n          dip_mil\n          code_dip_civ\n          code_dip_mil\n          formation\n          obs\n          dip_mil\n          dipmil {\n            abrFr\n            codeDipMil\n          }\n          dipcivil {\n            abrFr\n          }\n          trieAnciennete\n        }\n      }\n      noteRegionale\n      id\n      costumSort\n    }\n    pageable {\n      pageNumber\n      pageSize\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery findAllSanctions($pageable: PaginationInput) {\n  findAllRSanctions(pageable: $pageable) {\n    content {\n      id\n      lib\n      note\n    }\n  }\n}\n\nquery findCritereDePonderation($chef: Boolean!, $grade: Long, $poste: String) {\n  findCritereDePonderation(chef: $chef, grade: $grade, poste: $poste) {\n    note\n    id\n    grade {\n      grade\n      libGradeAr\n    }\n    poste {\n      idPoste\n    }\n  }\n}\n\nquery findAllNoteDiplome($pageable: PaginationInput) {\n  findAllNoteDiplome(pageable: $pageable) {\n    content {\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      id\n      index_\n      lib\n      note\n    }\n  }\n}\n\nquery findAllFelicitions($pageable: PaginationInput) {\n  findAllFelicitions(pageable: $pageable) {\n    content {\n      autorite\n      id\n      note\n    }\n  }\n}\n\nmutation addPav($pav: PavDtoInput) {\n  savePav(pavDto: $pav) {\n    id\n  }\n}\n\nmutation deletePav($pavId: String) {\n  deleteNote(pavId: $pavId)\n}\n\nmutation updateCostumSort($costumSort: Int, $pavId: String) {\n  updateCostumSort(costumSort: $costumSort, pavId: $pavId)\n}"): (typeof documents)["query findByMatricule($matricule: String) {\n  findByMatricule(matricule: $matricule) {\n    noteDiplome {\n      note\n      lib\n      id\n    }\n    ancienneteDansLeGrade\n    felicitations {\n      nombre\n      felicitation {\n        autorite\n        note\n      }\n    }\n    sanctions {\n      nombre\n      sanctions {\n        lib\n        note\n      }\n    }\n    anne\n    chef\n    dureeExcercice\n    ancienneteDansLeGrade\n    nombreDeProposition\n    noteArme\n    noteRegionale\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      arme {\n        id\n        libArmeAr\n        libArmeFr\n      }\n    }\n    noteRegionale\n  }\n}\n\nquery findAllPav($pageable: PaginationInput, $idGrade: Long) {\n  findAllPav(pageable: $pageable, idGrade: $idGrade) {\n    content {\n      noteDiplome {\n        note\n        lib\n        id\n      }\n      noteGlobale\n      ancienneteDansLeGrade\n      dureeExcerciceUnite\n      ponderation {\n        id\n      }\n      felicitations {\n        nombre\n        felicitation {\n          autorite\n          note\n        }\n        id {\n          felicitationsId\n          pavId\n        }\n      }\n      sanctions {\n        nombre\n        sanctions {\n          lib\n          note\n          id\n        }\n        id {\n          pavId\n          sanctionsId\n        }\n      }\n      anne\n      chef\n      dureeExcercice\n      ancienneteDansLeGrade\n      nombreDeProposition\n      noteArme\n      noteRegionale\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n        grade {\n          grade\n          libGradeAr\n          libGradeFr\n        }\n        arme {\n          id\n          libArmeAr\n          libArmeFr\n        }\n        pamOff2024 {\n          grade\n          g\n          noma\n          pnoma\n          libArmeAr\n          arme\n          matricule\n          personnelNotes {\n            id\n          }\n          structureSn {\n            id\n            typeStructureSn {\n              id\n            }\n            runite {\n              id\n              libUniteeAr\n              abreviationAr\n              abreviationFr\n              regionMilitaire {\n                id\n                libRegionFr\n                libRegionAr\n                libAbrRegionAr\n                libAbrRegionFr\n              }\n            }\n          }\n          dureeN\n          dureeS\n          libArmeAr\n          fonction\n          ensFonction\n          ens\n          NMutation\n          NDureeS\n          poste\n          csn\n          promotionNumber\n          DUREE_FONCT\n          ficheVoeuxes {\n            id {\n              matricule\n              annee\n            }\n            rhRunite1 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n            rhRunite2 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n            rhRunite3 {\n              id\n              regionMilitaire {\n                id\n                libAbrRegionFr\n                libAbrRegionAr\n                libRegionAr\n                libRegionFr\n              }\n              libUniteeAr\n              abreviationFr\n              abreviationAr\n            }\n          }\n          demandeRadiations {\n            dateDemande\n            id\n          }\n          dip_civ\n          dip_mil\n          code_dip_civ\n          code_dip_mil\n          formation\n          obs\n          dip_mil\n          dipmil {\n            abrFr\n            codeDipMil\n          }\n          dipcivil {\n            abrFr\n          }\n          trieAnciennete\n        }\n      }\n      noteRegionale\n      id\n      costumSort\n    }\n    pageable {\n      pageNumber\n      pageSize\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery findAllSanctions($pageable: PaginationInput) {\n  findAllRSanctions(pageable: $pageable) {\n    content {\n      id\n      lib\n      note\n    }\n  }\n}\n\nquery findCritereDePonderation($chef: Boolean!, $grade: Long, $poste: String) {\n  findCritereDePonderation(chef: $chef, grade: $grade, poste: $poste) {\n    note\n    id\n    grade {\n      grade\n      libGradeAr\n    }\n    poste {\n      idPoste\n    }\n  }\n}\n\nquery findAllNoteDiplome($pageable: PaginationInput) {\n  findAllNoteDiplome(pageable: $pageable) {\n    content {\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      id\n      index_\n      lib\n      note\n    }\n  }\n}\n\nquery findAllFelicitions($pageable: PaginationInput) {\n  findAllFelicitions(pageable: $pageable) {\n    content {\n      autorite\n      id\n      note\n    }\n  }\n}\n\nmutation addPav($pav: PavDtoInput) {\n  savePav(pavDto: $pav) {\n    id\n  }\n}\n\nmutation deletePav($pavId: String) {\n  deleteNote(pavId: $pavId)\n}\n\nmutation updateCostumSort($costumSort: Int, $pavId: String) {\n  updateCostumSort(costumSort: $costumSort, pavId: $pavId)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetOwnedFolders($username_: String!) {\n  ownedFolders(username_: $username_) {\n    id\n    name\n    description\n  }\n}\n\nquery findAllOcrResultEntityByFoldersContaining($folderId: Long, $pagination: PaginationInput) {\n  findAllOcrResultEntityByFoldersContaining(\n    pageable: $pagination\n    folderId: $folderId\n  ) {\n    content {\n      id\n      numberOfPapers\n      originalFileName\n      ocrDone\n      ocrResultUserGrants {\n        id {\n          type\n          userId\n          ocrResultId\n        }\n        user {\n          id\n          personnel {\n            matricule\n            noma\n            pnoma\n            nom\n            pnom\n          }\n        }\n      }\n      typeTexteReglementaire {\n        id\n        libTypeTexteAr\n        libTypeTexteFr\n      }\n      folders {\n        id\n        description\n        name\n      }\n      ocrResultPinned {\n        id\n      }\n      confidentialite {\n        id\n        libConfidentialiteAr\n        libConfidentialiteFr\n      }\n    }\n    totalElements\n    pageable {\n      pageSize\n      pageNumber\n    }\n  }\n}\n\nquery GetFovoriteFolder {\n  favoriteFolder(userName: \"ddf\") {\n    id\n    description\n  }\n}\n\nquery GetFolder($folderId: Long) {\n  folder(folderId: $folderId) {\n    id\n    description\n  }\n}\n\nquery GetPdfFile($fileSignatue: String) {\n  ocrResultByid(fileSignatue: $fileSignatue) {\n    originalFileName\n    id\n    folders {\n      id\n      name\n      description\n    }\n    ocrDone\n    numberOfPapers\n    typeTexteReglementaire {\n      libTypeTexteFr\n      libTypeTexteAr\n    }\n    confidentialite {\n      libConfidentialiteAr\n      libConfidentialiteFr\n      id\n    }\n    reference\n    dateReference\n    executedAt\n    terminatedAt\n  }\n}\n\nquery FindAllOcrResultsPaged($pageable: PaginationInput) {\n  findAllOcrResultsPaged(pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    totalElements\n    numberOfElements\n    totalPages\n    content {\n      owner {\n        id\n        personnel {\n          matricule\n          id\n          nom\n          noma\n          pnom\n          pnoma\n        }\n      }\n      terminatedAt\n      originalFileName\n      dateReference\n      createdDate\n      executedAt\n      terminatedAt\n      ocrDone\n      folders {\n        id\n        createdDate\n      }\n    }\n  }\n}\n\nquery CpuUsage {\n  cpuUsage_\n}\n\nquery ThreadInfo {\n  threadInfo\n}\n\nquery MemoryUsage {\n  memoryUsage_ {\n    committed\n    init\n    max\n    used\n  }\n}\n\nquery AllTypeTexteReglementaires {\n  allTypeTexteReglementaires {\n    id\n    libTypeTexteAr\n    libTypeTexteFr\n  }\n}\n\nquery TypeTexteReglementaireByLibFr($libFr: String) {\n  typeTexteReglementaireByLibFr(libFr: $libFr) {\n    libTypeTexteFr\n    libTypeTexteAr\n    id\n  }\n}\n\nquery AllConfidentialites {\n  allConfidentialites {\n    id\n    libConfidentialiteAr\n    libConfidentialiteFr\n  }\n}\n\nquery IsOcrJobRunning {\n  isOcrJobRunning\n}\n\nquery OcrResultImagePrepared($id: String, $pageIndex: Int, $size: Int) {\n  ocrResultImagePrepared(ocrResultid: $id, pageIndex: $pageIndex, size: $size)\n}\n\nquery OcrResultPdf($id: String) {\n  ocrResultPdf(ocrResultid: $id)\n}\n\nquery FindPinnedOcrResults {\n  findPinnedOcrResults {\n    ocrResult {\n      typeTexteReglementaire {\n        id\n        libTypeTexteFr\n        libTypeTexteAr\n      }\n      confidentialite {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n      dateReference\n      dateReference\n      originalFileName\n      numberOfPapers\n    }\n  }\n}\n\nquery _FindAllOcrResultsPaged($pageable: PaginationInput) {\n  findAllOcrResultsPaged(pageable: $pageable) {\n    content {\n      ocrDone\n      originalFileName\n      createdDate\n    }\n  }\n}\n\nquery FindAllPinnedFiles {\n  findPinnedOcrResults {\n    ocrResult {\n      id\n      originalFileName\n      dateReference\n      reference\n      typeTexteReglementaire {\n        id\n        libTypeTexteAr\n        libTypeTexteFr\n      }\n      numberOfPapers\n      objects {\n        subject {\n          id\n          typeTexteReglementaire {\n            id\n            libTypeTexteAr\n            libTypeTexteFr\n          }\n          reference\n          dateReference\n          numberOfPapers\n        }\n        relationType {\n          id\n          libTypeRelationAr\n          libTypRelationFr\n        }\n      }\n      subjects {\n        object {\n          typeTexteReglementaire {\n            id\n            libTypeTexteFr\n            libTypeTexteAr\n          }\n          reference\n          dateReference\n          numberOfPapers\n        }\n        relationType {\n          id\n          libTypRelationFr\n          libTypeRelationAr\n        }\n      }\n      confidentialite {\n        id\n        libConfidentialiteAr\n        libConfidentialiteFr\n      }\n    }\n  }\n}\n\nquery getLoggedInUser($userName: String) {\n  user(matricule: $userName) {\n    id\n    accountNonExpired\n    accountNonLocked\n    authorities {\n      authority\n    }\n    demandeInscription {\n      dateDemande\n    }\n    folders {\n      id\n    }\n    habilitation {\n      id\n      abbreviation\n      libHabilitationAr\n      libHabilitationFr\n      confidentialites {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n    }\n    personnel {\n      matricule\n      nom\n      pnom\n      noma\n      pnoma\n      grade {\n        libGradeAr\n        grade\n      }\n      arme {\n        libArmeAr\n        id\n      }\n    }\n  }\n}\n\nquery getHablitations {\n  habilitations {\n    libHabilitationAr\n    libHabilitationFr\n    id\n    confidentialites {\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n  }\n}\n\nquery allOcrResultConfidentialteNotDefined {\n  allOcrResultConfidentialteNotDefined {\n    id\n    originalFileName\n    typeTexteReglementaire {\n      id\n      libTypeTexteAr\n      libTypeTexteFr\n    }\n    reference\n    dateReference\n    numberOfPapers\n    confidentialite {\n      id\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n  }\n}\n\nquery enumsWrapperForCodeGeneration($enum: EnumsWrapperInput) {\n  enumsWrapperForCodeGeneration(enumsWrapper: $enum) {\n    privilegesEnum\n    rolesEnum\n  }\n}\n\nquery Users {\n  getUsers {\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n    habilitation {\n      libHabilitationFr\n      libHabilitationAr\n    }\n  }\n}\n\nquery OcrResultUserGrants($fileSignatue: String) {\n  ocrResultByid(fileSignatue: $fileSignatue) {\n    id\n    reference\n    dateReference\n    typeTexteReglementaire {\n      libTypeTexteFr\n      libTypeTexteFr\n    }\n    confidentialite {\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n    ocrResultUserGrants {\n      user {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n        habilitation {\n          libHabilitationFr\n          confidentialites {\n            libConfidentialiteFr\n            libConfidentialiteAr\n          }\n        }\n      }\n      id {\n        type\n        ocrResultId\n        userId\n      }\n    }\n  }\n}\n\nquery AllOcrResultUsersGrantsPaged($pageable: PaginationInput) {\n  allOcrResultUsersGrantsPaged(pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      id\n      confidentialite {\n        libConfidentialiteFr\n        libConfidentialiteAr\n        id\n      }\n      typeTexteReglementaire {\n        id\n        libTypeTexteFr\n        libTypeTexteAr\n      }\n      dateReference\n      reference\n      numberOfPapers\n      originalFileName\n      ocrResultUserGrants {\n        id {\n          userId\n          ocrResultId\n          type\n        }\n        user {\n          personnel {\n            nom\n            pnom\n            noma\n            pnoma\n            matricule\n          }\n        }\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery userConfidentialites($matricule: String) {\n  user(matricule: $matricule) {\n    habilitation {\n      libHabilitationFr\n      confidentialites {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n    }\n  }\n}\n\nquery User($matricule: String) {\n  user(matricule: $matricule) {\n    id\n    personnel {\n      matricule\n      nom\n      pnom\n      noma\n      pnoma\n    }\n    habilitation {\n      id\n      libHabilitationAr\n      libHabilitationFr\n    }\n    enabled\n    demandeInscription {\n      dateDemande\n    }\n    authorities {\n      authority\n    }\n    accountNonLocked\n    accountNonLocked\n    privileges {\n      id\n      description\n      name\n    }\n    privileges_restriction {\n      name\n      description\n      id\n    }\n    roles {\n      id\n      description\n      name\n      privileges {\n        name\n        description\n        id\n      }\n    }\n  }\n}\n\nquery allUsersPaged($pageable: PaginationInput) {\n  allUsersPaged(pageable: $pageable) {\n    content {\n      id\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n      }\n    }\n    totalElements\n  }\n}\n\nquery UserAuthorities($matricule: String) {\n  user(matricule: $matricule) {\n    authorities {\n      authority\n    }\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n  }\n}\n\nquery findAllRoles {\n  findAllRoles {\n    id\n    description\n    name\n    privileges {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery findAllRolesPaged($paginationInput: PaginationInput) {\n  allRolesPaged(pageable: $paginationInput) {\n    totalElements\n    content {\n      id\n      name\n      description\n      privileges {\n        id\n        name\n        description\n      }\n    }\n  }\n}\n\nquery findRoleById($roleId: String) {\n  findRoleById(roleId: $roleId) {\n    id\n    name\n    description\n    privileges {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery allPrivileges {\n  allPrivileges {\n    id\n    description\n    name\n  }\n}\n\nquery privilegeById($privilegeById: Long) {\n  privilegeById(PrivilegeId: $privilegeById) {\n    name\n    description\n    id\n  }\n}\n\nquery allPrivilegesPaged($paginationInput: PaginationInput) {\n  allPrivilegesPaged(pageable: $paginationInput) {\n    totalElements\n    content {\n      id\n      description\n      name\n    }\n  }\n}\n\nquery findAllDemandeInscriptionRemaining {\n  findAllDemandeInscriptionRemaining {\n    id\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n    dateDemande\n  }\n}\n\nmutation validateUserDemande($matricule: String) {\n  validateUserDemande(matricule: $matricule) {\n    personnel {\n      matricule\n      noma\n      pnomA\n      pnom\n      nom\n    }\n  }\n}\n\nmutation AddOcrResultToFolder($folderId: Long!, $ocrResultId: [String]!) {\n  addOcrResultsToFolder(folderId: $folderId, ocrResultIds: $ocrResultId) {\n    id\n    name\n    pdfFiles {\n      id\n      originalFileName\n    }\n  }\n}\n\nmutation CreateFolder($folder: FolderInput, $username: String) {\n  createFolder(folder: $folder, username: $username) {\n    name\n    description\n    id\n    color\n  }\n}\n\nmutation DeleteFolder($folder_id: Long) {\n  deleteFolder(folderId: $folder_id)\n}\n\nmutation DeletePdfFileFromFolder($folderId: Long, $pdfId: String) {\n  deletePdfFileFromFolder(folderId: $folderId, pdfId: $pdfId)\n}\n\nmutation StartScheduler {\n  startScheduler\n}\n\nmutation StopScheduler {\n  stopScheduler\n}\n\nmutation PinOcrResult($ocrResultId: String) {\n  pinOcrResult(ocrResultId: $ocrResultId) {\n    id\n  }\n}\n\nmutation UnpinOcrResult($id: String) {\n  unpinOcrResult(id: $id)\n}\n\nmutation SetHabilitation($habilitaitonId: String, $userName: String) {\n  setHablitation(habilitaitonId: $habilitaitonId, userName: $userName)\n}\n\nmutation changeOcrResultGrant($ocrResultUserGrantKeys: [OcrResultUserGrantKeyInputInput], $ocrResultId: String) {\n  changeOcrResultGrant(\n    ocrResultId: $ocrResultId\n    ocrResultUserGrantKeysInput: $ocrResultUserGrantKeys\n  ) {\n    id {\n      ocrResultId\n      type\n      userId\n    }\n    user {\n      personnel {\n        matricule\n        id\n        noma\n        pnoma\n      }\n    }\n  }\n}\n\nmutation updateConfidentialite($ocrResultId: String, $confidentialiteId: String) {\n  updateConfidentialite(\n    ocrResultId: $ocrResultId\n    confidentailteId: $confidentialiteId\n  )\n}\n\nmutation UserAddPrivilege($username: String, $privilegeName: String) {\n  userAddPrivilege(userName: $username, privilegeName: $privilegeName)\n}\n\nmutation UserAddPrivilegeRestriction($privilegeName: String, $userName: String) {\n  userAddPrivilegeRestriction(privilegeName: $privilegeName, userName: $userName)\n}\n\nmutation UserAddRole($userName: String, $roleName: String) {\n  userAddRole(userName: $userName, roleName: $roleName)\n}\n\nmutation UserDeletePrivilege($userName: String, $privilegeName: String) {\n  userDeletePrivilege(userName: $userName, privilegeName: $privilegeName)\n}\n\nmutation UserDeletePrivilegeRestriction($userName: String, $privilegeName: String) {\n  userDeletePrivilegeRestriction(\n    userName: $userName\n    privilegeName: $privilegeName\n  )\n}\n\nmutation UserDeleteRole($userName: String, $roleName: String) {\n  userDeleteRole(userName: $userName, roleName: $roleName)\n}\n\nmutation addPrivilegeToRole($roleId: String, $privilegeId: String) {\n  addPrivilegeToRole(roleId: $roleId, privilegeId: $privilegeId)\n}\n\nmutation deletePrivilegeFromRole($roleId: String, $privilegeId: String) {\n  deletePrivilegeFromRole(privilegeId: $privilegeId, roleId: $roleId)\n}\n\nmutation generateThumbnails {\n  generateThumbnails\n}"): (typeof documents)["query GetOwnedFolders($username_: String!) {\n  ownedFolders(username_: $username_) {\n    id\n    name\n    description\n  }\n}\n\nquery findAllOcrResultEntityByFoldersContaining($folderId: Long, $pagination: PaginationInput) {\n  findAllOcrResultEntityByFoldersContaining(\n    pageable: $pagination\n    folderId: $folderId\n  ) {\n    content {\n      id\n      numberOfPapers\n      originalFileName\n      ocrDone\n      ocrResultUserGrants {\n        id {\n          type\n          userId\n          ocrResultId\n        }\n        user {\n          id\n          personnel {\n            matricule\n            noma\n            pnoma\n            nom\n            pnom\n          }\n        }\n      }\n      typeTexteReglementaire {\n        id\n        libTypeTexteAr\n        libTypeTexteFr\n      }\n      folders {\n        id\n        description\n        name\n      }\n      ocrResultPinned {\n        id\n      }\n      confidentialite {\n        id\n        libConfidentialiteAr\n        libConfidentialiteFr\n      }\n    }\n    totalElements\n    pageable {\n      pageSize\n      pageNumber\n    }\n  }\n}\n\nquery GetFovoriteFolder {\n  favoriteFolder(userName: \"ddf\") {\n    id\n    description\n  }\n}\n\nquery GetFolder($folderId: Long) {\n  folder(folderId: $folderId) {\n    id\n    description\n  }\n}\n\nquery GetPdfFile($fileSignatue: String) {\n  ocrResultByid(fileSignatue: $fileSignatue) {\n    originalFileName\n    id\n    folders {\n      id\n      name\n      description\n    }\n    ocrDone\n    numberOfPapers\n    typeTexteReglementaire {\n      libTypeTexteFr\n      libTypeTexteAr\n    }\n    confidentialite {\n      libConfidentialiteAr\n      libConfidentialiteFr\n      id\n    }\n    reference\n    dateReference\n    executedAt\n    terminatedAt\n  }\n}\n\nquery FindAllOcrResultsPaged($pageable: PaginationInput) {\n  findAllOcrResultsPaged(pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    totalElements\n    numberOfElements\n    totalPages\n    content {\n      owner {\n        id\n        personnel {\n          matricule\n          id\n          nom\n          noma\n          pnom\n          pnoma\n        }\n      }\n      terminatedAt\n      originalFileName\n      dateReference\n      createdDate\n      executedAt\n      terminatedAt\n      ocrDone\n      folders {\n        id\n        createdDate\n      }\n    }\n  }\n}\n\nquery CpuUsage {\n  cpuUsage_\n}\n\nquery ThreadInfo {\n  threadInfo\n}\n\nquery MemoryUsage {\n  memoryUsage_ {\n    committed\n    init\n    max\n    used\n  }\n}\n\nquery AllTypeTexteReglementaires {\n  allTypeTexteReglementaires {\n    id\n    libTypeTexteAr\n    libTypeTexteFr\n  }\n}\n\nquery TypeTexteReglementaireByLibFr($libFr: String) {\n  typeTexteReglementaireByLibFr(libFr: $libFr) {\n    libTypeTexteFr\n    libTypeTexteAr\n    id\n  }\n}\n\nquery AllConfidentialites {\n  allConfidentialites {\n    id\n    libConfidentialiteAr\n    libConfidentialiteFr\n  }\n}\n\nquery IsOcrJobRunning {\n  isOcrJobRunning\n}\n\nquery OcrResultImagePrepared($id: String, $pageIndex: Int, $size: Int) {\n  ocrResultImagePrepared(ocrResultid: $id, pageIndex: $pageIndex, size: $size)\n}\n\nquery OcrResultPdf($id: String) {\n  ocrResultPdf(ocrResultid: $id)\n}\n\nquery FindPinnedOcrResults {\n  findPinnedOcrResults {\n    ocrResult {\n      typeTexteReglementaire {\n        id\n        libTypeTexteFr\n        libTypeTexteAr\n      }\n      confidentialite {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n      dateReference\n      dateReference\n      originalFileName\n      numberOfPapers\n    }\n  }\n}\n\nquery _FindAllOcrResultsPaged($pageable: PaginationInput) {\n  findAllOcrResultsPaged(pageable: $pageable) {\n    content {\n      ocrDone\n      originalFileName\n      createdDate\n    }\n  }\n}\n\nquery FindAllPinnedFiles {\n  findPinnedOcrResults {\n    ocrResult {\n      id\n      originalFileName\n      dateReference\n      reference\n      typeTexteReglementaire {\n        id\n        libTypeTexteAr\n        libTypeTexteFr\n      }\n      numberOfPapers\n      objects {\n        subject {\n          id\n          typeTexteReglementaire {\n            id\n            libTypeTexteAr\n            libTypeTexteFr\n          }\n          reference\n          dateReference\n          numberOfPapers\n        }\n        relationType {\n          id\n          libTypeRelationAr\n          libTypRelationFr\n        }\n      }\n      subjects {\n        object {\n          typeTexteReglementaire {\n            id\n            libTypeTexteFr\n            libTypeTexteAr\n          }\n          reference\n          dateReference\n          numberOfPapers\n        }\n        relationType {\n          id\n          libTypRelationFr\n          libTypeRelationAr\n        }\n      }\n      confidentialite {\n        id\n        libConfidentialiteAr\n        libConfidentialiteFr\n      }\n    }\n  }\n}\n\nquery getLoggedInUser($userName: String) {\n  user(matricule: $userName) {\n    id\n    accountNonExpired\n    accountNonLocked\n    authorities {\n      authority\n    }\n    demandeInscription {\n      dateDemande\n    }\n    folders {\n      id\n    }\n    habilitation {\n      id\n      abbreviation\n      libHabilitationAr\n      libHabilitationFr\n      confidentialites {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n    }\n    personnel {\n      matricule\n      nom\n      pnom\n      noma\n      pnoma\n      grade {\n        libGradeAr\n        grade\n      }\n      arme {\n        libArmeAr\n        id\n      }\n    }\n  }\n}\n\nquery getHablitations {\n  habilitations {\n    libHabilitationAr\n    libHabilitationFr\n    id\n    confidentialites {\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n  }\n}\n\nquery allOcrResultConfidentialteNotDefined {\n  allOcrResultConfidentialteNotDefined {\n    id\n    originalFileName\n    typeTexteReglementaire {\n      id\n      libTypeTexteAr\n      libTypeTexteFr\n    }\n    reference\n    dateReference\n    numberOfPapers\n    confidentialite {\n      id\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n  }\n}\n\nquery enumsWrapperForCodeGeneration($enum: EnumsWrapperInput) {\n  enumsWrapperForCodeGeneration(enumsWrapper: $enum) {\n    privilegesEnum\n    rolesEnum\n  }\n}\n\nquery Users {\n  getUsers {\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n    habilitation {\n      libHabilitationFr\n      libHabilitationAr\n    }\n  }\n}\n\nquery OcrResultUserGrants($fileSignatue: String) {\n  ocrResultByid(fileSignatue: $fileSignatue) {\n    id\n    reference\n    dateReference\n    typeTexteReglementaire {\n      libTypeTexteFr\n      libTypeTexteFr\n    }\n    confidentialite {\n      libConfidentialiteAr\n      libConfidentialiteFr\n    }\n    ocrResultUserGrants {\n      user {\n        personnel {\n          matricule\n          nom\n          pnom\n          noma\n          pnoma\n        }\n        habilitation {\n          libHabilitationFr\n          confidentialites {\n            libConfidentialiteFr\n            libConfidentialiteAr\n          }\n        }\n      }\n      id {\n        type\n        ocrResultId\n        userId\n      }\n    }\n  }\n}\n\nquery AllOcrResultUsersGrantsPaged($pageable: PaginationInput) {\n  allOcrResultUsersGrantsPaged(pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      id\n      confidentialite {\n        libConfidentialiteFr\n        libConfidentialiteAr\n        id\n      }\n      typeTexteReglementaire {\n        id\n        libTypeTexteFr\n        libTypeTexteAr\n      }\n      dateReference\n      reference\n      numberOfPapers\n      originalFileName\n      ocrResultUserGrants {\n        id {\n          userId\n          ocrResultId\n          type\n        }\n        user {\n          personnel {\n            nom\n            pnom\n            noma\n            pnoma\n            matricule\n          }\n        }\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n\nquery userConfidentialites($matricule: String) {\n  user(matricule: $matricule) {\n    habilitation {\n      libHabilitationFr\n      confidentialites {\n        id\n        libConfidentialiteFr\n        libConfidentialiteAr\n      }\n    }\n  }\n}\n\nquery User($matricule: String) {\n  user(matricule: $matricule) {\n    id\n    personnel {\n      matricule\n      nom\n      pnom\n      noma\n      pnoma\n    }\n    habilitation {\n      id\n      libHabilitationAr\n      libHabilitationFr\n    }\n    enabled\n    demandeInscription {\n      dateDemande\n    }\n    authorities {\n      authority\n    }\n    accountNonLocked\n    accountNonLocked\n    privileges {\n      id\n      description\n      name\n    }\n    privileges_restriction {\n      name\n      description\n      id\n    }\n    roles {\n      id\n      description\n      name\n      privileges {\n        name\n        description\n        id\n      }\n    }\n  }\n}\n\nquery allUsersPaged($pageable: PaginationInput) {\n  allUsersPaged(pageable: $pageable) {\n    content {\n      id\n      personnel {\n        matricule\n        noma\n        pnoma\n        nom\n        pnom\n      }\n    }\n    totalElements\n  }\n}\n\nquery UserAuthorities($matricule: String) {\n  user(matricule: $matricule) {\n    authorities {\n      authority\n    }\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n  }\n}\n\nquery findAllRoles {\n  findAllRoles {\n    id\n    description\n    name\n    privileges {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery findAllRolesPaged($paginationInput: PaginationInput) {\n  allRolesPaged(pageable: $paginationInput) {\n    totalElements\n    content {\n      id\n      name\n      description\n      privileges {\n        id\n        name\n        description\n      }\n    }\n  }\n}\n\nquery findRoleById($roleId: String) {\n  findRoleById(roleId: $roleId) {\n    id\n    name\n    description\n    privileges {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery allPrivileges {\n  allPrivileges {\n    id\n    description\n    name\n  }\n}\n\nquery privilegeById($privilegeById: Long) {\n  privilegeById(PrivilegeId: $privilegeById) {\n    name\n    description\n    id\n  }\n}\n\nquery allPrivilegesPaged($paginationInput: PaginationInput) {\n  allPrivilegesPaged(pageable: $paginationInput) {\n    totalElements\n    content {\n      id\n      description\n      name\n    }\n  }\n}\n\nquery findAllDemandeInscriptionRemaining {\n  findAllDemandeInscriptionRemaining {\n    id\n    personnel {\n      matricule\n      noma\n      pnoma\n      nom\n      pnom\n    }\n    dateDemande\n  }\n}\n\nmutation validateUserDemande($matricule: String) {\n  validateUserDemande(matricule: $matricule) {\n    personnel {\n      matricule\n      noma\n      pnomA\n      pnom\n      nom\n    }\n  }\n}\n\nmutation AddOcrResultToFolder($folderId: Long!, $ocrResultId: [String]!) {\n  addOcrResultsToFolder(folderId: $folderId, ocrResultIds: $ocrResultId) {\n    id\n    name\n    pdfFiles {\n      id\n      originalFileName\n    }\n  }\n}\n\nmutation CreateFolder($folder: FolderInput, $username: String) {\n  createFolder(folder: $folder, username: $username) {\n    name\n    description\n    id\n    color\n  }\n}\n\nmutation DeleteFolder($folder_id: Long) {\n  deleteFolder(folderId: $folder_id)\n}\n\nmutation DeletePdfFileFromFolder($folderId: Long, $pdfId: String) {\n  deletePdfFileFromFolder(folderId: $folderId, pdfId: $pdfId)\n}\n\nmutation StartScheduler {\n  startScheduler\n}\n\nmutation StopScheduler {\n  stopScheduler\n}\n\nmutation PinOcrResult($ocrResultId: String) {\n  pinOcrResult(ocrResultId: $ocrResultId) {\n    id\n  }\n}\n\nmutation UnpinOcrResult($id: String) {\n  unpinOcrResult(id: $id)\n}\n\nmutation SetHabilitation($habilitaitonId: String, $userName: String) {\n  setHablitation(habilitaitonId: $habilitaitonId, userName: $userName)\n}\n\nmutation changeOcrResultGrant($ocrResultUserGrantKeys: [OcrResultUserGrantKeyInputInput], $ocrResultId: String) {\n  changeOcrResultGrant(\n    ocrResultId: $ocrResultId\n    ocrResultUserGrantKeysInput: $ocrResultUserGrantKeys\n  ) {\n    id {\n      ocrResultId\n      type\n      userId\n    }\n    user {\n      personnel {\n        matricule\n        id\n        noma\n        pnoma\n      }\n    }\n  }\n}\n\nmutation updateConfidentialite($ocrResultId: String, $confidentialiteId: String) {\n  updateConfidentialite(\n    ocrResultId: $ocrResultId\n    confidentailteId: $confidentialiteId\n  )\n}\n\nmutation UserAddPrivilege($username: String, $privilegeName: String) {\n  userAddPrivilege(userName: $username, privilegeName: $privilegeName)\n}\n\nmutation UserAddPrivilegeRestriction($privilegeName: String, $userName: String) {\n  userAddPrivilegeRestriction(privilegeName: $privilegeName, userName: $userName)\n}\n\nmutation UserAddRole($userName: String, $roleName: String) {\n  userAddRole(userName: $userName, roleName: $roleName)\n}\n\nmutation UserDeletePrivilege($userName: String, $privilegeName: String) {\n  userDeletePrivilege(userName: $userName, privilegeName: $privilegeName)\n}\n\nmutation UserDeletePrivilegeRestriction($userName: String, $privilegeName: String) {\n  userDeletePrivilegeRestriction(\n    userName: $userName\n    privilegeName: $privilegeName\n  )\n}\n\nmutation UserDeleteRole($userName: String, $roleName: String) {\n  userDeleteRole(userName: $userName, roleName: $roleName)\n}\n\nmutation addPrivilegeToRole($roleId: String, $privilegeId: String) {\n  addPrivilegeToRole(roleId: $roleId, privilegeId: $privilegeId)\n}\n\nmutation deletePrivilegeFromRole($roleId: String, $privilegeId: String) {\n  deletePrivilegeFromRole(privilegeId: $privilegeId, roleId: $roleId)\n}\n\nmutation generateThumbnails {\n  generateThumbnails\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPhotoByMatriculeAndSize($matricule: String, $size: Int!) {\n  getThumbnailByMatriculeAndSize(matricule: $matricule, size: $size) {\n    thumbData\n    id\n    photo {\n      format\n    }\n    thumbSize\n  }\n}\n\nmutation generateThumbnails {\n  generateThumbnails\n}\n\nquery photoByMatricule($matricule: String) {\n  photoByMatricule(matricule: $matricule) {\n    id\n    format\n    translateX\n    translateY\n    height\n    width\n    rotation\n    photoData\n    personnel {\n      matricule\n      noma\n      pnoma\n      grade {\n        grade\n        libGradeAr\n        libGradeArDetermine\n      }\n      arme {\n        id\n        libArmeAr\n      }\n    }\n    thumbnails {\n      id\n      thumbSize\n      thumbData\n    }\n  }\n}"): (typeof documents)["query GetPhotoByMatriculeAndSize($matricule: String, $size: Int!) {\n  getThumbnailByMatriculeAndSize(matricule: $matricule, size: $size) {\n    thumbData\n    id\n    photo {\n      format\n    }\n    thumbSize\n  }\n}\n\nmutation generateThumbnails {\n  generateThumbnails\n}\n\nquery photoByMatricule($matricule: String) {\n  photoByMatricule(matricule: $matricule) {\n    id\n    format\n    translateX\n    translateY\n    height\n    width\n    rotation\n    photoData\n    personnel {\n      matricule\n      noma\n      pnoma\n      grade {\n        grade\n        libGradeAr\n        libGradeArDetermine\n      }\n      arme {\n        id\n        libArmeAr\n      }\n    }\n    thumbnails {\n      id\n      thumbSize\n      thumbData\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query searchUsersByToken($searchToken: String, $pageable: PaginationInput) {\n  searchUsersByToken(searchToken: $searchToken, pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      id\n      personnel {\n        id\n        arme {\n          id\n        }\n        grade {\n          grade\n        }\n        nom\n        pnom\n        noma\n        pnoma\n      }\n    }\n  }\n}"): (typeof documents)["query searchUsersByToken($searchToken: String, $pageable: PaginationInput) {\n  searchUsersByToken(searchToken: $searchToken, pageable: $pageable) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      id\n      personnel {\n        id\n        arme {\n          id\n        }\n        grade {\n          grade\n        }\n        nom\n        pnom\n        noma\n        pnoma\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createSimulation($simulationDto: SimulationDtoInput) {\n  createSimulation(simulationDto: $simulationDto) {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nmutation setNumberOfSteps($simulationId: Long, $steps: Int!) {\n  setNumberOfSteps(simulationId: $simulationId, steps: $steps)\n}\n\nmutation startSimulation($simulationId: Long) {\n  startSimulation(simulationId: $simulationId)\n}\n\nmutation createSimAgent($simAgentDto: SimAgentDtoInput) {\n  createSimAgent(simAgentDto: $simAgentDto) {\n    simAgentId {\n      step\n      id\n    }\n  }\n}\n\nquery simulationById($simulationId: Long) {\n  simulationById(simulationId: $simulationId) {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nquery simulations {\n  simulations {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nquery simAgentsByStepAndSimulation($simulaitonId: Long, $pageable: PaginationInput, $step: Int!) {\n  simAgentsByStepAndSimulation(\n    simulationId: $simulaitonId\n    pageable: $pageable\n    step: $step\n  ) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      arme {\n        id\n        libArmeAr\n        libArmeFr\n      }\n      nom\n      pnom\n      noma\n      pnoma\n      age\n      anicenneteGrade\n      anneDeService\n      class_\n      nombreDeProposition\n      simAgentId {\n        id\n        step\n      }\n      typeRecrutement\n    }\n  }\n}\n\nmutation deleteSimAgent($simAgentId: SimAgentIdInput) {\n  deleteSimAgent(simAgentId: $simAgentId)\n}\n\nmutation createRecrutement($recrutemnt: RecrutementDtoInput) {\n  createRecrutement(recrutementDto: $recrutemnt) {\n    id\n    typeRecrutement\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nmutation updateRecrutemntNombre($nombre: Int!, $recrutmentId: Long) {\n  updateRecrutemntNombre(nomber: $nombre, recrutemntId: $recrutmentId)\n}\n\nmutation deleteRecrutement($recrutmentId: Long) {\n  deleteRecrutement(recrutementId: $recrutmentId)\n}\n\nquery allRecrutemnts {\n  allRecrutemnts {\n    nombre\n    anneDeRecrutemnt\n    typeRecrutement\n    id\n  }\n}\n\nquery recrutementByClass($class: Int!, $simulationId: Long) {\n  recrutementByClass(class_: $class, simulationId: $simulationId) {\n    id\n    typeRecrutement\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nquery recrutementByTypeRecrutement($typeRecrutment: TypeRecrutement, $simulationId: Long) {\n  recrutementByTypeRecrutement(\n    typeRecrutement: $typeRecrutment\n    simulationId: $simulationId\n  ) {\n    typeRecrutement\n    nombre\n    anneDeRecrutemnt\n    id\n  }\n}\n\nquery recrutementByTypeRecrutementAndClass($typeRecrutment: TypeRecrutement, $classe: Int!, $simulationId: Long) {\n  recrutementByTypeRecrutementAndClass(\n    typeRecrutement: $typeRecrutment\n    classe_: $classe\n    simulationId: $simulationId\n  ) {\n    typeRecrutement\n    id\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nquery allRecrutemntsBySimulation($simulationId: Long) {\n  allRecrutemntsBySimulation(simulationId: $simulationId) {\n    nombre\n    anneDeRecrutemnt\n    id\n    typeRecrutement\n    simulation {\n      id\n      name\n      description\n    }\n  }\n}\n\nmutation createRecrutementV2($recrutemnt: RecrutementV2DtoInput) {\n  createRecrutementV2(recrutementV2Dto: $recrutemnt) {\n    anneDeRecrutemnt\n    EMP\n    FF\n    FS_L\n    FS_M\n    simulation {\n      id\n      description\n      name\n    }\n  }\n}\n\nmutation updateRecrutemntV2($recrutementV2Dto: RecrutementV2DtoInput) {\n  updateRecrutemntV2(recrutementV2Dto: $recrutementV2Dto)\n}\n\nmutation deleteRecrutementV2($recrutmentId: Int!) {\n  deleteRecrutementV2(recrutementId: $recrutmentId)\n}\n\nquery allRecrutemntsV2 {\n  allRecrutemntsV2 {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery recrutementV2ByClass($class: Int!, $simulationId: Long) {\n  recrutementV2ByClass(class_: $class, simulationId: $simulationId) {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery allRecrutemntsV2BySimulation($simulationId: Long) {\n  allRecrutemntsV2BySimulation(simulationId: $simulationId) {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}"): (typeof documents)["mutation createSimulation($simulationDto: SimulationDtoInput) {\n  createSimulation(simulationDto: $simulationDto) {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nmutation setNumberOfSteps($simulationId: Long, $steps: Int!) {\n  setNumberOfSteps(simulationId: $simulationId, steps: $steps)\n}\n\nmutation startSimulation($simulationId: Long) {\n  startSimulation(simulationId: $simulationId)\n}\n\nmutation createSimAgent($simAgentDto: SimAgentDtoInput) {\n  createSimAgent(simAgentDto: $simAgentDto) {\n    simAgentId {\n      step\n      id\n    }\n  }\n}\n\nquery simulationById($simulationId: Long) {\n  simulationById(simulationId: $simulationId) {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nquery simulations {\n  simulations {\n    id\n    name\n    numberOfSteps\n    description\n    dateDebut\n    dateFin\n  }\n}\n\nquery simAgentsByStepAndSimulation($simulaitonId: Long, $pageable: PaginationInput, $step: Int!) {\n  simAgentsByStepAndSimulation(\n    simulationId: $simulaitonId\n    pageable: $pageable\n    step: $step\n  ) {\n    pageable {\n      pageNumber\n      pageSize\n    }\n    content {\n      grade {\n        grade\n        libGradeAr\n        libGradeFr\n      }\n      arme {\n        id\n        libArmeAr\n        libArmeFr\n      }\n      nom\n      pnom\n      noma\n      pnoma\n      age\n      anicenneteGrade\n      anneDeService\n      class_\n      nombreDeProposition\n      simAgentId {\n        id\n        step\n      }\n      typeRecrutement\n    }\n  }\n}\n\nmutation deleteSimAgent($simAgentId: SimAgentIdInput) {\n  deleteSimAgent(simAgentId: $simAgentId)\n}\n\nmutation createRecrutement($recrutemnt: RecrutementDtoInput) {\n  createRecrutement(recrutementDto: $recrutemnt) {\n    id\n    typeRecrutement\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nmutation updateRecrutemntNombre($nombre: Int!, $recrutmentId: Long) {\n  updateRecrutemntNombre(nomber: $nombre, recrutemntId: $recrutmentId)\n}\n\nmutation deleteRecrutement($recrutmentId: Long) {\n  deleteRecrutement(recrutementId: $recrutmentId)\n}\n\nquery allRecrutemnts {\n  allRecrutemnts {\n    nombre\n    anneDeRecrutemnt\n    typeRecrutement\n    id\n  }\n}\n\nquery recrutementByClass($class: Int!, $simulationId: Long) {\n  recrutementByClass(class_: $class, simulationId: $simulationId) {\n    id\n    typeRecrutement\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nquery recrutementByTypeRecrutement($typeRecrutment: TypeRecrutement, $simulationId: Long) {\n  recrutementByTypeRecrutement(\n    typeRecrutement: $typeRecrutment\n    simulationId: $simulationId\n  ) {\n    typeRecrutement\n    nombre\n    anneDeRecrutemnt\n    id\n  }\n}\n\nquery recrutementByTypeRecrutementAndClass($typeRecrutment: TypeRecrutement, $classe: Int!, $simulationId: Long) {\n  recrutementByTypeRecrutementAndClass(\n    typeRecrutement: $typeRecrutment\n    classe_: $classe\n    simulationId: $simulationId\n  ) {\n    typeRecrutement\n    id\n    anneDeRecrutemnt\n    nombre\n  }\n}\n\nquery allRecrutemntsBySimulation($simulationId: Long) {\n  allRecrutemntsBySimulation(simulationId: $simulationId) {\n    nombre\n    anneDeRecrutemnt\n    id\n    typeRecrutement\n    simulation {\n      id\n      name\n      description\n    }\n  }\n}\n\nmutation createRecrutementV2($recrutemnt: RecrutementV2DtoInput) {\n  createRecrutementV2(recrutementV2Dto: $recrutemnt) {\n    anneDeRecrutemnt\n    EMP\n    FF\n    FS_L\n    FS_M\n    simulation {\n      id\n      description\n      name\n    }\n  }\n}\n\nmutation updateRecrutemntV2($recrutementV2Dto: RecrutementV2DtoInput) {\n  updateRecrutemntV2(recrutementV2Dto: $recrutementV2Dto)\n}\n\nmutation deleteRecrutementV2($recrutmentId: Int!) {\n  deleteRecrutementV2(recrutementId: $recrutmentId)\n}\n\nquery allRecrutemntsV2 {\n  allRecrutemntsV2 {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery recrutementV2ByClass($class: Int!, $simulationId: Long) {\n  recrutementV2ByClass(class_: $class, simulationId: $simulationId) {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}\n\nquery allRecrutemntsV2BySimulation($simulationId: Long) {\n  allRecrutemntsV2BySimulation(simulationId: $simulationId) {\n    anneDeRecrutemnt\n    FS_M\n    FS_L\n    FF\n    EMP\n    simulation {\n      name\n      description\n      id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query gradeById($id: Long) {\n  gradeById(gradeId: $id) {\n    abrGradeAr\n    abrGradeFr\n    grade\n    gradeInf\n    libGradeAr\n    libGradeFr\n    rhRCatGrade {\n      cat\n      catGrade\n      libCatAr\n      libCatFr\n      libCatGradeAr\n      libCatGradeFr\n    }\n  }\n}\n\nquery allGrades {\n  allGrades {\n    grade\n    libGradeFr\n    libGradeAr\n    abrGradeFr\n    abrGradeAr\n    gradeInf\n  }\n}\n\nquery allGradesWithCategrie {\n  allGrades {\n    grade\n    libGradeFr\n    libGradeAr\n    abrGradeFr\n    abrGradeAr\n    gradeInf\n    rhRCatGrade {\n      catGrade\n      cat\n      libCatGradeFr\n      libCatGradeAr\n      libCatFr\n      libCatAr\n    }\n  }\n}\n\nquery armeById($id: Long) {\n  armeById(armeId: $id) {\n    id\n    libArmeAr\n    libArmeFr\n    commandement {\n      id\n      libCommandementAr\n      libCommandementFr\n    }\n  }\n}\n\nquery allArmes {\n  allArmes {\n    id\n    libArmeFr\n    libArmeAr\n  }\n}\n\nquery commandementById($id: BigInteger) {\n  commandementById(id: $id) {\n    id\n    libCommandementFr\n    libCommandementAr\n    RArmes {\n      id\n      libArmeAr\n      libArmeFr\n    }\n  }\n}\n\nquery allCommandemnets {\n  allCommandements {\n    id\n    libCommandementAr\n    libCommandementFr\n  }\n}"): (typeof documents)["query gradeById($id: Long) {\n  gradeById(gradeId: $id) {\n    abrGradeAr\n    abrGradeFr\n    grade\n    gradeInf\n    libGradeAr\n    libGradeFr\n    rhRCatGrade {\n      cat\n      catGrade\n      libCatAr\n      libCatFr\n      libCatGradeAr\n      libCatGradeFr\n    }\n  }\n}\n\nquery allGrades {\n  allGrades {\n    grade\n    libGradeFr\n    libGradeAr\n    abrGradeFr\n    abrGradeAr\n    gradeInf\n  }\n}\n\nquery allGradesWithCategrie {\n  allGrades {\n    grade\n    libGradeFr\n    libGradeAr\n    abrGradeFr\n    abrGradeAr\n    gradeInf\n    rhRCatGrade {\n      catGrade\n      cat\n      libCatGradeFr\n      libCatGradeAr\n      libCatFr\n      libCatAr\n    }\n  }\n}\n\nquery armeById($id: Long) {\n  armeById(armeId: $id) {\n    id\n    libArmeAr\n    libArmeFr\n    commandement {\n      id\n      libCommandementAr\n      libCommandementFr\n    }\n  }\n}\n\nquery allArmes {\n  allArmes {\n    id\n    libArmeFr\n    libArmeAr\n  }\n}\n\nquery commandementById($id: BigInteger) {\n  commandementById(id: $id) {\n    id\n    libCommandementFr\n    libCommandementAr\n    RArmes {\n      id\n      libArmeAr\n      libArmeFr\n    }\n  }\n}\n\nquery allCommandemnets {\n  allCommandements {\n    id\n    libCommandementAr\n    libCommandementFr\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query findOcrResultEntityESbyId($fildId: String) {\n  findOcrResultEntityESbyId(fileId: $fildId) {\n    dateReference\n    reference\n    id\n    libConfidentialiteAr\n    libTypeTexteAr\n    libUrgenceAr\n    numberOfPapers\n    originalFileName\n    owner\n    pages {\n      bbox {\n        x1\n        x2\n        y1\n        y2\n      }\n      id_page\n      type\n      paragraphs {\n        bbox {\n          x1\n          x2\n          y1\n          y2\n        }\n        id_par\n        lang\n        type\n      }\n    }\n  }\n}\n\nquery isFavorite($ocrResultId: String, $userName: String) {\n  favorite(ocrResultId: $ocrResultId, userName: $userName)\n}\n\nmutation toggleFavorite($ocrResultId: String) {\n  toggleFavorite(ocrResultId: $ocrResultId)\n}"): (typeof documents)["query findOcrResultEntityESbyId($fildId: String) {\n  findOcrResultEntityESbyId(fileId: $fildId) {\n    dateReference\n    reference\n    id\n    libConfidentialiteAr\n    libTypeTexteAr\n    libUrgenceAr\n    numberOfPapers\n    originalFileName\n    owner\n    pages {\n      bbox {\n        x1\n        x2\n        y1\n        y2\n      }\n      id_page\n      type\n      paragraphs {\n        bbox {\n          x1\n          x2\n          y1\n          y2\n        }\n        id_par\n        lang\n        type\n      }\n    }\n  }\n}\n\nquery isFavorite($ocrResultId: String, $userName: String) {\n  favorite(ocrResultId: $ocrResultId, userName: $userName)\n}\n\nmutation toggleFavorite($ocrResultId: String) {\n  toggleFavorite(ocrResultId: $ocrResultId)\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;